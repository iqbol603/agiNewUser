#!/usr/bin/env node

import { BotApp } from './src/bot/BotApp.js';
import { ApiClient } from './src/services/ApiClient.js';
import { EmployeesService } from './src/services/EmployeesService.js';
import { ToolRouter } from './src/services/ToolRouter.js';
import { Notifier } from './src/services/Notifier.js';
import { log } from './src/utils/logger.js';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_EMPLOYEE = {
  id: 1,
  employee_id: 1,
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫',
  chat_id: '123456789',
  user_role: 'staff',
  position: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
};

const TEST_MANAGER = {
  id: 2,
  employee_id: 2,
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –ú–µ–Ω–µ–¥–∂–µ—Ä',
  chat_id: '987654321',
  user_role: 'manager',
  position: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'
};

async function testBotFunctions() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞...\n');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    const api = new ApiClient();
    const employees = new EmployeesService(api);
    const notifier = new Notifier(null); // –ë–µ–∑ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    const tools = new ToolRouter({ api, employees, notifier });

    console.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    console.log('\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
    try {
      const createResult = await tools.route('create_task', {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
        assigneeName: '–¢–µ—Å—Ç–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫',
        desc: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏',
        deadline: '–∑–∞–≤—Ç—Ä–∞ 17:00',
        priority: '–°—Ä–µ–¥–Ω–∏–π'
      }, {
        requesterChatId: '987654321',
        requesterEmployee: TEST_MANAGER
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', createResult);
      if (createResult.ok) {
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', createResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error.message);
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
    try {
      const listResult = await tools.route('list_tasks', {}, {
        requesterChatId: '123456789',
        requesterEmployee: TEST_EMPLOYEE
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', listResult);
      if (listResult.ok) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${listResult.tasks.length} –∑–∞–¥–∞—á`);
        if (listResult.tasks.length > 0) {
          console.log('–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞:', listResult.tasks[0]);
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', listResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error.message);
    }

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    console.log('\nüë• –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
    try {
      const employeesResult = await tools.route('list_employees', {}, {
        requesterChatId: '123456789',
        requesterEmployee: TEST_EMPLOYEE
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', employeesResult);
      if (employeesResult.ok) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${employeesResult.employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
        if (employeesResult.employees.length > 0) {
          console.log('–ü–µ—Ä–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:', employeesResult.employees[0]);
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', employeesResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error.message);
    }

    // –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    console.log('\nüîÑ –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
    try {
      const updateResult = await tools.route('update_status', {
        taskId: '1',
        status: '–í —Ä–∞–±–æ—Ç–µ'
      }, {
        requesterChatId: '123456789',
        requesterEmployee: TEST_EMPLOYEE
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', updateResult);
      if (updateResult.ok) {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', updateResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    }

    // –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ DoD —á–µ–∫-–ª–∏—Å—Ç–∞
    console.log('\nüìã –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ DoD —á–µ–∫-–ª–∏—Å—Ç–∞');
    try {
      const dodResult = await tools.route('create_dod_checklist', {
        taskId: 1,
        checklistType: 'development',
        items: [
          '–ö–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω –∏ –æ—Ç—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω',
          '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
          '–ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∫–æ–ª–ª–µ–≥–æ–π'
        ]
      }, {
        requesterChatId: '123456789',
        requesterEmployee: TEST_EMPLOYEE
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è DoD:', dodResult);
      if (dodResult.ok) {
        console.log('‚úÖ DoD —á–µ–∫-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DoD:', dodResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DoD:', error.message);
    }

    // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    console.log('\nüìä –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞');
    try {
      const reportResult = await tools.route('create_task_report', {
        taskId: 1,
        summary: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
        details: '–í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        quality: '–•–æ—Ä–æ—à–æ'
      }, {
        requesterChatId: '123456789',
        requesterEmployee: TEST_EMPLOYEE
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', reportResult);
      if (reportResult.ok) {
        console.log('‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', reportResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error.message);
    }

    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–¥–∞—á–∏
    console.log('\n‚úÖ –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–¥–∞—á–∏');
    try {
      const complianceResult = await tools.route('check_task_compliance', {
        taskId: 1
      }, {
        requesterChatId: '123456789',
        requesterEmployee: TEST_EMPLOYEE
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:', complianceResult);
      if (complianceResult.ok) {
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:', complianceResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:', error.message);
    }

    // –¢–µ—Å—Ç 8: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    console.log('\nüíæ –¢–µ—Å—Ç 8: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞');
    try {
      const artifactResult = await tools.route('save_artifact', {
        taskId: 1,
        artifactType: 'documentation',
        fileName: 'test_document.txt',
        filePath: '/tmp/test_document.txt',
        fileSize: 1024,
        contentPreview: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç'
      }, {
        requesterChatId: '123456789',
        requesterEmployee: TEST_EMPLOYEE
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:', artifactResult);
      if (artifactResult.ok) {
        console.log('‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:', artifactResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:', error.message);
    }

    // –¢–µ—Å—Ç 9: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π
    console.log('\nüìù –¢–µ—Å—Ç 9: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π');
    try {
      const explanationResult = await tools.route('submit_explanation', {
        explanationId: 1,
        explanationText: '–¢–µ—Å—Ç–æ–≤–∞—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ'
      }, {
        requesterChatId: '123456789',
        requesterEmployee: TEST_EMPLOYEE
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π:', explanationResult);
      if (explanationResult.ok) {
        console.log('‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π:', explanationResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π:', error.message);
    }

    // –¢–µ—Å—Ç 10: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    console.log('\nüìà –¢–µ—Å—Ç 10: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞');
    try {
      const reportResult = await tools.route('report', {}, {
        requesterChatId: '123456789',
        requesterEmployee: TEST_EMPLOYEE
      });

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', reportResult);
      if (reportResult.ok) {
        console.log('‚úÖ –û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω');
        console.log('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á:', reportResult.report.total);
        console.log('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', reportResult.report.byStatus);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', reportResult.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testBotFunctions().catch(console.error);
