import { assertEnv } from '../src/config/env.js';
import { query } from '../src/config/db.js';
import { log } from '../src/utils/logger.js';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
 */

async function showTaskStatusHistory(taskId = null) {
  try {
    assertEnv();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
    const tables = await query("SHOW TABLES LIKE 'task_status_history'");
    
    if (!tables || tables.length === 0) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ task_status_history –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤...');
      
      await query(`
        CREATE TABLE IF NOT EXISTS task_status_history (
          id INT AUTO_INCREMENT PRIMARY KEY,
          task_id BIGINT NOT NULL,
          old_status VARCHAR(50),
          new_status VARCHAR(50) NOT NULL,
          changed_by BIGINT,
          changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          change_reason TEXT,
          INDEX idx_task_id (task_id),
          INDEX idx_changed_at (changed_at),
          INDEX idx_new_status (new_status)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `);
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ task_status_history —Å–æ–∑–¥–∞–Ω–∞.');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
      await restoreHistoryFromTasks();
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
    let historyQuery = `
      SELECT 
        tsh.task_id,
        t.task as task_title,
        tsh.old_status,
        tsh.new_status,
        tsh.changed_at,
        tsh.changed_by,
        e.name as changed_by_name,
        tsh.change_reason
      FROM task_status_history tsh
      LEFT JOIN tasks t ON t.task_id = tsh.task_id
      LEFT JOIN employees e ON e.employee_id = tsh.changed_by
    `;
    
    const params = [];
    if (taskId) {
      historyQuery += ' WHERE tsh.task_id = ?';
      params.push(taskId);
    }
    
    historyQuery += ' ORDER BY tsh.changed_at DESC';
    
    const history = await query(historyQuery, params);
    
    if (!history || history.length === 0) {
      console.log('üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      if (taskId) {
        console.log(`–î–ª—è –∑–∞–¥–∞—á–∏ #${taskId} –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞.`);
      }
      return;
    }
    
    console.log('\nüìä –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–¢–ê–¢–£–°–û–í –ó–ê–î–ê–ß');
    console.log('=' .repeat(80));
    
    if (taskId) {
      console.log(`\nüéØ –ó–∞–¥–∞—á–∞ #${taskId}: ${history[0].task_title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.log('=' .repeat(80));
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–∞–¥–∞—á–∞–º
    const tasksHistory = {};
    for (const record of history) {
      if (!tasksHistory[record.task_id]) {
        tasksHistory[record.task_id] = {
          title: record.task_title,
          changes: []
        };
      }
      tasksHistory[record.task_id].changes.push(record);
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é
    for (const [taskId, taskData] of Object.entries(tasksHistory)) {
      console.log(`\nüìå –ó–∞–¥–∞—á–∞ #${taskId}: ${taskData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      console.log('-'.repeat(60));
      
      for (const change of taskData.changes) {
        const date = new Date(change.changed_at).toLocaleString('ru-RU');
        const oldStatus = change.old_status || '–ù–æ–≤—ã–π';
        const newStatus = change.new_status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const changedBy = change.changed_by_name || `ID:${change.changed_by}` || '–°–∏—Å—Ç–µ–º–∞';
        const reason = change.change_reason ? ` (${change.change_reason})` : '';
        
        console.log(`  ${date} | ${oldStatus} ‚Üí ${newStatus} | ${changedBy}${reason}`);
      }
    }
    
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`‚Ä¢ –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${history.length}`);
    console.log(`‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: ${Object.keys(tasksHistory).length}`);
    
  } catch (error) {
    log.error('[TASK_STATUS_HISTORY] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤:', error.message);
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
 */
async function restoreHistoryFromTasks() {
  try {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –∏—Ö —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const tasks = await query(`
      SELECT 
        t.task_id,
        t.task,
        t.status,
        t.created_at,
        ta.assigner_employee_id
      FROM tasks t
      LEFT JOIN task_assigners ta ON ta.task_id = t.task_id
      ORDER BY t.created_at ASC
    `);
    
    if (!tasks || tasks.length === 0) {
      console.log('üìù –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.');
      return;
    }
    
    let restored = 0;
    for (const task of tasks) {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
      await query(`
        INSERT IGNORE INTO task_status_history 
        (task_id, old_status, new_status, changed_by, changed_at, change_reason)
        VALUES (?, ?, ?, ?, ?, ?)
      `, [
        task.task_id,
        null, // old_status
        task.status || 'new',
        task.assigner_employee_id,
        task.created_at,
        '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
      ]);
      restored++;
    }
    
    console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restored} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏.`);
    
  } catch (error) {
    log.error('[RESTORE_HISTORY] –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
 */
export async function logStatusChange(taskId, oldStatus, newStatus, changedBy, reason = null) {
  try {
    await query(`
      INSERT INTO task_status_history 
      (task_id, old_status, new_status, changed_by, change_reason)
      VALUES (?, ?, ?, ?, ?)
    `, [taskId, oldStatus, newStatus, changedBy, reason]);
    
    log.info(`[TASK_STATUS_HISTORY] –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ ${taskId}: ${oldStatus} ‚Üí ${newStatus}`);
  } catch (error) {
    log.error('[TASK_STATUS_HISTORY] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  const args = process.argv.slice(2);
  const taskId = args[0] ? parseInt(args[0]) : null;
  
  if (taskId) {
    console.log(`üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId}`);
  } else {
    console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á');
  }
  
  await showTaskStatusHistory(taskId);
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
