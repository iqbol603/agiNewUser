import { assertEnv } from '../src/config/env.js';
import { query } from '../src/config/db.js';
import { log } from '../src/utils/logger.js';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –∫—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –±–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã
 */

async function checkExplanationsReport() {
  try {
    assertEnv();
    
    console.log('üìù –û–¢–ß–ï–¢ –ü–û –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ú –°–û–¢–†–£–î–ù–ò–ö–û–í');
    console.log('=' .repeat(80));
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
    const explanations = await query(`
      SELECT 
        ee.id,
        ee.task_id,
        ee.employee_id,
        ee.explanation_text,
        ee.status,
        ee.requested_at,
        ee.responded_at,
        ee.manager_decision,
        ee.bonus_penalty_amount,
        e.name as employee_name,
        e.job as employee_job,
        e.chat_id,
        t.task as task_title,
        t.deadline as task_deadline
      FROM employee_explanations ee
      LEFT JOIN employees e ON e.employee_id = ee.employee_id
      LEFT JOIN tasks t ON t.task_id = ee.task_id
      ORDER BY ee.requested_at DESC
    `);
    
    if (!explanations || explanations.length === 0) {
      console.log('‚ùå –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${explanations.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusCounts = {};
    for (const exp of explanations) {
      const status = exp.status || 'unknown';
      statusCounts[status] = (statusCounts[status] || 0) + 1;
    }
    
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:');
    console.log('-'.repeat(40));
    for (const [status, count] of Object.entries(statusCounts)) {
      const statusName = {
        'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è',
        'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ',
        'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
        'bonus_penalty': 'üí∞ –ë–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ'
      }[status] || status;
      console.log(`   ${statusName}: ${count}`);
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    const byEmployee = {};
    for (const exp of explanations) {
      const empId = exp.employee_id;
      if (!byEmployee[empId]) {
        byEmployee[empId] = {
          name: exp.employee_name,
          job: exp.employee_job,
          chat_id: exp.chat_id,
          explanations: []
        };
      }
      byEmployee[empId].explanations.push(exp);
    }
    
    console.log('\nüë• –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û –°–û–¢–†–£–î–ù–ò–ö–ê–ú:');
    console.log('=' .repeat(80));
    
    for (const [empId, data] of Object.entries(byEmployee)) {
      console.log(`\nüë§ ${data.name} (ID: ${empId})`);
      console.log(`   üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${data.job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   üí¨ Chat ID: ${data.chat_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${data.explanations.length}`);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const empStatusCounts = {};
      let totalBonusPenalty = 0;
      let hasBonusPenalty = false;
      
      for (const exp of data.explanations) {
        const status = exp.status || 'unknown';
        empStatusCounts[status] = (empStatusCounts[status] || 0) + 1;
        
        if (exp.bonus_penalty_amount && exp.bonus_penalty_amount !== 0) {
          totalBonusPenalty += parseFloat(exp.bonus_penalty_amount);
          hasBonusPenalty = true;
        }
      }
      
      console.log('   üìä –°—Ç–∞—Ç—É—Å—ã:');
      for (const [status, count] of Object.entries(empStatusCounts)) {
        const statusName = {
          'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
          'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ',
          'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
          'bonus_penalty': 'üí∞ –ë–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ'
        }[status] || status;
        console.log(`      ${statusName}: ${count}`);
      }
      
      if (hasBonusPenalty) {
        console.log(`   üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤/—à—Ç—Ä–∞—Ñ–æ–≤: ${totalBonusPenalty}`);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
      const recent = data.explanations.slice(0, 5);
      console.log('   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:');
      for (const exp of recent) {
        const requestedAt = new Date(exp.requested_at).toLocaleString('ru-RU');
        const respondedAt = exp.responded_at ? 
          new Date(exp.responded_at).toLocaleString('ru-RU') : '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
        
        console.log(`\n      üìå –ó–∞–¥–∞—á–∞ #${exp.task_id}: ${exp.task_title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
        console.log(`         üìÖ –ó–∞–ø—Ä–æ—à–µ–Ω–∞: ${requestedAt}`);
        console.log(`         üìÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${respondedAt}`);
        console.log(`         üìä –°—Ç–∞—Ç—É—Å: ${exp.status}`);
        
        if (exp.explanation_text && exp.explanation_text.length > 50) {
          console.log(`         üí¨ –¢–µ–∫—Å—Ç: ${exp.explanation_text.substring(0, 50)}...`);
        } else if (exp.explanation_text) {
          console.log(`         üí¨ –¢–µ–∫—Å—Ç: ${exp.explanation_text}`);
        }
        
        if (exp.manager_decision) {
          console.log(`         üéØ –†–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: ${exp.manager_decision}`);
        }
        
        if (exp.bonus_penalty_amount && exp.bonus_penalty_amount !== 0) {
          console.log(`         üí∞ –ë–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ: ${exp.bonus_penalty_amount}`);
        }
      }
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ–Ω—É—Å–∞–º/—à—Ç—Ä–∞—Ñ–∞–º
    console.log('\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–û–ù–£–°–ê–ú/–®–¢–†–ê–§–ê–ú:');
    console.log('=' .repeat(80));
    
    const bonusPenaltyExplanations = explanations.filter(exp => 
      exp.bonus_penalty_amount && parseFloat(exp.bonus_penalty_amount) !== 0
    );
    
    if (bonusPenaltyExplanations.length > 0) {
      console.log(`üìä –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å –±–æ–Ω—É—Å–∞–º–∏/—à—Ç—Ä–∞—Ñ–∞–º–∏: ${bonusPenaltyExplanations.length}`);
      
      let totalPositive = 0;
      let totalNegative = 0;
      
      for (const exp of bonusPenaltyExplanations) {
        const amount = parseFloat(exp.bonus_penalty_amount);
        if (amount > 0) {
          totalPositive += amount;
        } else {
          totalNegative += Math.abs(amount);
        }
      }
      
      console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: ${totalPositive}`);
      console.log(`üí∏ –û–±—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤: ${totalNegative}`);
      console.log(`üìà –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${totalPositive - totalNegative}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      const bonusPenaltyByEmployee = {};
      for (const exp of bonusPenaltyExplanations) {
        const empId = exp.employee_id;
        if (!bonusPenaltyByEmployee[empId]) {
          bonusPenaltyByEmployee[empId] = {
            name: exp.employee_name,
            bonuses: 0,
            penalties: 0,
            tasks: new Set()
          };
        }
        
        const amount = parseFloat(exp.bonus_penalty_amount);
        if (amount > 0) {
          bonusPenaltyByEmployee[empId].bonuses += amount;
        } else {
          bonusPenaltyByEmployee[empId].penalties += Math.abs(amount);
        }
        bonusPenaltyByEmployee[empId].tasks.add(exp.task_id);
      }
      
      console.log('\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –±–æ–Ω—É—Å–∞–º/—à—Ç—Ä–∞—Ñ–∞–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:');
      for (const [empId, data] of Object.entries(bonusPenaltyByEmployee)) {
        console.log(`\nüë§ ${data.name} (ID: ${empId})`);
        if (data.bonuses > 0) {
          console.log(`   üí∞ –ë–æ–Ω—É—Å—ã: ${data.bonuses}`);
        }
        if (data.penalties > 0) {
          console.log(`   üí∏ –®—Ç—Ä–∞—Ñ—ã: ${data.penalties}`);
        }
        console.log(`   üìå –ó–∞–¥–∞—á: ${data.tasks.size}`);
      }
    } else {
      console.log('‚ùå –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å –±–æ–Ω—É—Å–∞–º–∏/—à—Ç—Ä–∞—Ñ–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }
    
    // –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±–µ–∑ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    console.log('\nüë• –°–û–¢–†–£–î–ù–ò–ö–ò –ë–ï–ó –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–•:');
    console.log('=' .repeat(80));
    
    const allEmployees = await query(`
      SELECT 
        employee_id,
        name,
        job,
        chat_id
      FROM employees 
      WHERE employee_id NOT IN (
        SELECT DISTINCT employee_id 
        FROM employee_explanations 
        WHERE employee_id IS NOT NULL
      )
      ORDER BY name
    `);
    
    if (allEmployees && allEmployees.length > 0) {
      console.log(`üìä –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${allEmployees.length}`);
      for (const emp of allEmployees) {
        console.log(`   üë§ ${emp.name} (ID: ${emp.employee_id}) - ${emp.job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      }
    } else {
      console.log('‚úÖ –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ.');
    }
    
  } catch (error) {
    log.error('[CHECK_EXPLANATIONS_REPORT] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  await checkExplanationsReport();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
