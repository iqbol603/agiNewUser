#!/usr/bin/env node

import { assertEnv } from '../src/config/env.js';
import { query } from '../src/config/db.js';
import { log } from '../src/utils/logger.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
 * –í–∫–ª—é—á–∞–µ—Ç:
 * 1. –ü–æ–∫–∞–∑ –¥–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
 * 2. –î–µ—Ç–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
 * 3. –ü—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
 * 4. –ü—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
 */

async function showTaskStatusHistory(taskId = null) {
  console.log('\nüìä –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–¢–ê–¢–£–°–û–í –ó–ê–î–ê–ß');
  console.log('=' .repeat(80));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
    const tables = await query("SHOW TABLES LIKE 'task_status_history'");
    
    if (!tables || tables.length === 0) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ task_status_history –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤...');
      
      await query(`
        CREATE TABLE IF NOT EXISTS task_status_history (
          id INT AUTO_INCREMENT PRIMARY KEY,
          task_id BIGINT NOT NULL,
          old_status VARCHAR(50),
          new_status VARCHAR(50) NOT NULL,
          changed_by BIGINT,
          changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          change_reason TEXT,
          INDEX idx_task_id (task_id),
          INDEX idx_changed_at (changed_at),
          INDEX idx_new_status (new_status)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `);
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ task_status_history —Å–æ–∑–¥–∞–Ω–∞.');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
      const tasks = await query(`
        SELECT 
          t.task_id,
          t.task,
          t.status,
          t.created_at,
          ta.assigner_employee_id
        FROM tasks t
        LEFT JOIN task_assigners ta ON ta.task_id = t.task_id
        ORDER BY t.created_at ASC
        LIMIT 10
      `);
      
      if (tasks && tasks.length > 0) {
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á...');
        let restored = 0;
        for (const task of tasks) {
          await query(`
            INSERT IGNORE INTO task_status_history 
            (task_id, old_status, new_status, changed_by, changed_at, change_reason)
            VALUES (?, ?, ?, ?, ?, ?)
          `, [
            task.task_id,
            null,
            task.status || 'new',
            task.assigner_employee_id,
            task.created_at,
            '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
          ]);
          restored++;
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restored} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏.`);
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
    let historyQuery = `
      SELECT 
        tsh.task_id,
        t.task as task_title,
        tsh.old_status,
        tsh.new_status,
        tsh.changed_at,
        tsh.changed_by,
        e.name as changed_by_name,
        tsh.change_reason
      FROM task_status_history tsh
      LEFT JOIN tasks t ON t.task_id = tsh.task_id
      LEFT JOIN employees e ON e.employee_id = tsh.changed_by
    `;
    
    const params = [];
    if (taskId) {
      historyQuery += ' WHERE tsh.task_id = ?';
      params.push(taskId);
    }
    
    historyQuery += ' ORDER BY tsh.changed_at DESC LIMIT 20';
    
    const history = await query(historyQuery, params);
    
    if (!history || history.length === 0) {
      console.log('üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–∞–¥–∞—á–∞–º
    const tasksHistory = {};
    for (const record of history) {
      if (!tasksHistory[record.task_id]) {
        tasksHistory[record.task_id] = {
          title: record.task_title,
          changes: []
        };
      }
      tasksHistory[record.task_id].changes.push(record);
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é
    for (const [taskId, taskData] of Object.entries(tasksHistory)) {
      console.log(`\nüìå –ó–∞–¥–∞—á–∞ #${taskId}: ${taskData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      console.log('-'.repeat(60));
      
      for (const change of taskData.changes) {
        const date = new Date(change.changed_at).toLocaleString('ru-RU');
        const oldStatus = change.old_status || '–ù–æ–≤—ã–π';
        const newStatus = change.new_status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const changedBy = change.changed_by_name || `ID:${change.changed_by}` || '–°–∏—Å—Ç–µ–º–∞';
        const reason = change.change_reason ? ` (${change.change_reason})` : '';
        
        console.log(`  ${date} | ${oldStatus} ‚Üí ${newStatus} | ${changedBy}${reason}`);
      }
    }
    
    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${history.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π, ${Object.keys(tasksHistory).length} –∑–∞–¥–∞—á`);
    
  } catch (error) {
    log.error('[TASK_STATUS_HISTORY] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤:', error.message);
  }
}

async function checkExplanatorySystem() {
  console.log('\nüìù –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–•');
  console.log('=' .repeat(80));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const overdueTasks = await query(`
      SELECT 
        t.task_id,
        t.task,
        t.status,
        t.deadline,
        e.name as employee_name,
        e.job as employee_job
      FROM tasks t
      LEFT JOIN employees e ON e.employee_id = t.employee_id
      WHERE t.deadline < NOW() 
        AND t.status NOT IN ('completed', 'closed', 'cancelled')
      ORDER BY t.deadline ASC
      LIMIT 10
    `);
    
    if (!overdueTasks || overdueTasks.length === 0) {
      console.log('‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    } else {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${overdueTasks.length}`);
      
      for (const task of overdueTasks) {
        const deadline = new Date(task.deadline);
        const now = new Date();
        const overdueDays = Math.floor((now - deadline) / (1000 * 60 * 60 * 24));
        
        console.log(`\nüìå –ó–∞–¥–∞—á–∞ #${task.task_id}: ${task.task}`);
        console.log(`   üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.employee_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`);
        console.log(`   üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleString('ru-RU')}`);
        console.log(`   ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞: ${overdueDays} –¥–Ω–µ–π`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${task.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    const explanationRequests = await query(`
      SELECT 
        ee.id,
        ee.task_id,
        ee.status as explanation_status,
        ee.requested_at,
        ee.responded_at,
        t.task,
        e.name as employee_name
      FROM employee_explanations ee
      LEFT JOIN tasks t ON t.task_id = ee.task_id
      LEFT JOIN employees e ON e.employee_id = ee.employee_id
      WHERE t.deadline < NOW() 
        AND t.status NOT IN ('completed', 'closed', 'cancelled')
      ORDER BY ee.requested_at DESC
      LIMIT 10
    `);
    
    if (!explanationRequests || explanationRequests.length === 0) {
      console.log('\n‚ùå –ó–∞–ø—Ä–æ—Å—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    } else {
      console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${explanationRequests.length}`);
      
      const statusCounts = {};
      for (const req of explanationRequests) {
        const status = req.explanation_status || 'unknown';
        statusCounts[status] = (statusCounts[status] || 0) + 1;
      }
      
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
      for (const [status, count] of Object.entries(statusCounts)) {
        console.log(`   ${status}: ${count}`);
      }
    }
    
  } catch (error) {
    log.error('[CHECK_EXPLANATORY_SYSTEM] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö:', error.message);
  }
}

async function checkDirectorNotifications() {
  console.log('\nüîî –ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–ò–†–ï–ö–¢–û–†–£');
  console.log('=' .repeat(80));
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    const overdueExplanations = await query(`
      SELECT 
        ee.id,
        ee.task_id,
        ee.employee_id,
        ee.requested_at,
        e.name as employee_name,
        e.job as employee_job,
        t.task as task_title
      FROM employee_explanations ee
      LEFT JOIN employees e ON ee.employee_id = e.employee_id
      LEFT JOIN tasks t ON ee.task_id = t.task_id
      WHERE ee.status = 'pending' 
        AND ee.requested_at < ?
      ORDER BY ee.requested_at ASC
      LIMIT 10
    `, [oneHourAgo]);
    
    if (!overdueExplanations || overdueExplanations.length === 0) {
      console.log('‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    } else {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${overdueExplanations.length}`);
      
      for (const explanation of overdueExplanations) {
        const requestedAt = new Date(explanation.requested_at);
        const now = new Date();
        const hoursOverdue = Math.floor((now - requestedAt) / (1000 * 60 * 60));
        
        console.log(`\nüìå –ó–∞–¥–∞—á–∞ #${explanation.task_id}: ${explanation.task_title}`);
        console.log(`   üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${explanation.employee_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   üìÖ –ó–∞–ø—Ä–æ—à–µ–Ω–∞: ${requestedAt.toLocaleString('ru-RU')}`);
        console.log(`   ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞: ${hoursOverdue} —á–∞—Å–æ–≤`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤
    const directorChatId = process.env.DIRECTOR_CHAT_ID;
    if (directorChatId) {
      console.log(`\n‚úÖ DIRECTOR_CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${directorChatId}`);
    } else {
      console.log('\n‚ùå DIRECTOR_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    const directors = await query(`
      SELECT 
        employee_id,
        name,
        job,
        chat_id
      FROM employees 
      WHERE job LIKE '%–¥–∏—Ä–µ–∫—Ç–æ—Ä%' 
         OR job LIKE '%—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å%'
         OR name LIKE '%–¥–∏—Ä–µ–∫—Ç–æ—Ä%'
      ORDER BY name
      LIMIT 5
    `);
    
    if (directors && directors.length > 0) {
      console.log(`\nüëë –î–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ (${directors.length}):`);
      for (const director of directors) {
        console.log(`   üë§ ${director.name} (ID: ${director.employee_id})`);
        console.log(`      üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${director.job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`      üí¨ Chat ID: ${director.chat_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      }
    } else {
      console.log('\n‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    log.error('[CHECK_DIRECTOR_NOTIFICATIONS] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—É:', error.message);
  }
}

async function showTaskDetailedHistory(taskId) {
  if (!taskId) return;
  
  console.log(`\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–°–¢–û–†–ò–Ø –ó–ê–î–ê–ß–ò #${taskId}`);
  console.log('=' .repeat(80));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const taskInfo = await query(`
      SELECT 
        t.task_id,
        t.task,
        t.description,
        t.status,
        t.prioritet as priority,
        t.deadline,
        t.created_at,
        assignee.name as assignee_name,
        assignee.employee_id as assignee_id,
        assignee.job as assignee_job,
        assigner.name as assigner_name,
        assigner.employee_id as assigner_id,
        assigner.job as assigner_job,
        ta.assigned_at
      FROM tasks t
      LEFT JOIN employees assignee ON assignee.employee_id = t.employee_id
      LEFT JOIN task_assigners ta ON ta.task_id = t.task_id
      LEFT JOIN employees assigner ON assigner.employee_id = ta.assigner_employee_id
      WHERE t.task_id = ?
    `, [taskId]);
    
    if (!taskInfo || taskInfo.length === 0) {
      console.log(`‚ùå –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      return;
    }
    
    const task = taskInfo[0];
    
    // –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log(`\nüìå –ó–ê–î–ê–ß–ê #${task.task_id}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.task || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
    console.log(`üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assignee_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'} (ID: ${task.assignee_id || 'N/A'})`);
    console.log(`üéØ –ù–∞–∑–Ω–∞—á–∏–ª: ${task.assigner_name || '–°–∏—Å—Ç–µ–º–∞'} (ID: ${task.assigner_id || 'N/A'})`);
    console.log(`üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(task.created_at).toLocaleString('ru-RU')}`);
    console.log(`‚è∞ –î–µ–¥–ª–∞–π–Ω: ${task.deadline ? new Date(task.deadline).toLocaleString('ru-RU') : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`üîÑ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${task.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
    const statusHistory = await query(`
      SELECT 
        tsh.old_status,
        tsh.new_status,
        tsh.changed_at,
        tsh.changed_by,
        e.name as changed_by_name,
        tsh.change_reason
      FROM task_status_history tsh
      LEFT JOIN employees e ON e.employee_id = tsh.changed_by
      WHERE tsh.task_id = ?
      ORDER BY tsh.changed_at ASC
    `, [taskId]);
    
    if (statusHistory && statusHistory.length > 0) {
      console.log(`\nüìà –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–¢–ê–¢–£–°–û–í`);
      console.log('-'.repeat(60));
      
      for (const change of statusHistory) {
        const date = new Date(change.changed_at).toLocaleString('ru-RU');
        const oldStatus = change.old_status || '–ù–æ–≤—ã–π';
        const newStatus = change.new_status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const changedBy = change.changed_by_name || `ID:${change.changed_by}` || '–°–∏—Å—Ç–µ–º–∞';
        const reason = change.change_reason ? ` (${change.change_reason})` : '';
        
        console.log(`  ${date} | ${oldStatus} ‚Üí ${newStatus} | ${changedBy}${reason}`);
      }
    } else {
      console.log(`\nüìà –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–¢–ê–¢–£–°–û–í`);
      console.log('-'.repeat(60));
      console.log('üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ –∑–∞–¥–∞—á–µ
    const explanations = await query(`
      SELECT 
        ee.id,
        ee.explanation_text,
        ee.status as explanation_status,
        ee.requested_at,
        ee.responded_at,
        e.name as employee_name
      FROM employee_explanations ee
      LEFT JOIN employees e ON e.employee_id = ee.employee_id
      WHERE ee.task_id = ?
      ORDER BY ee.requested_at DESC
    `, [taskId]);
    
    if (explanations && explanations.length > 0) {
      console.log(`\nüìù –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ï (${explanations.length})`);
      console.log('-'.repeat(60));
      
      for (const explanation of explanations) {
        const requestedAt = new Date(explanation.requested_at).toLocaleString('ru-RU');
        const respondedAt = explanation.responded_at ? 
          new Date(explanation.responded_at).toLocaleString('ru-RU') : '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
        
        console.log(`üìã ID: ${explanation.id} | –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${explanation.employee_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   üìÖ –ó–∞–ø—Ä–æ—à–µ–Ω–∞: ${requestedAt}`);
        console.log(`   üìÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${respondedAt}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${explanation.explanation_status}`);
        console.log('');
      }
    }
    
  } catch (error) {
    log.error('[TASK_DETAILED_HISTORY] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏:', error.message);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    assertEnv();
    
    const args = process.argv.slice(2);
    const command = args[0];
    const taskId = args[1] ? parseInt(args[1]) : null;
    
    console.log('üîç –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò - –ü–†–û–í–ï–†–ö–ê');
    console.log('=' .repeat(80));
    
    if (command === 'history' && taskId) {
      await showTaskDetailedHistory(taskId);
    } else if (command === 'status') {
      await showTaskStatusHistory(taskId);
    } else if (command === 'explanatory') {
      await checkExplanatorySystem();
    } else if (command === 'notifications') {
      await checkDirectorNotifications();
    } else if (command === 'all') {
      await showTaskStatusHistory();
      await checkExplanatorySystem();
      await checkDirectorNotifications();
    } else {
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
      console.log('  node task_management_check.js status [task_id]     - –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤');
      console.log('  node task_management_check.js history <task_id>    - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á–∏');
      console.log('  node task_management_check.js explanatory          - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö');
      console.log('  node task_management_check.js notifications        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—É');
      console.log('  node task_management_check.js all                  - –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
      console.log('');
      console.log('–ü—Ä–∏–º–µ—Ä—ã:');
      console.log('  node task_management_check.js status');
      console.log('  node task_management_check.js history 123');
      console.log('  node task_management_check.js all');
    }
    
  } catch (error) {
    log.error('[MAIN] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
