import { assertEnv } from '../src/config/env.js';
import { query } from '../src/config/db.js';
import { log } from '../src/utils/logger.js';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –∫—Ç–æ –Ω–∞–∑–Ω–∞—á–∏–ª, –∫–æ–º—É, –¥–∞—Ç—ã –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
 */

async function showTaskDetailedHistory(taskId) {
  try {
    assertEnv();
    
    if (!taskId) {
      console.log('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∑–∞–¥–∞—á–∏');
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node task_detailed_history.js <task_id>');
      return;
    }
    
    console.log(`üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ #${taskId}`);
    console.log('=' .repeat(80));
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    const taskInfo = await query(`
      SELECT 
        t.task_id,
        t.task,
        t.description,
        t.status,
        t.prioritet as priority,
        t.deadline,
        t.created_at,
        assignee.name as assignee_name,
        assignee.employee_id as assignee_id,
        assignee.job as assignee_job,
        assigner.name as assigner_name,
        assigner.employee_id as assigner_id,
        assigner.job as assigner_job,
        ta.assigned_at
      FROM tasks t
      LEFT JOIN employees assignee ON assignee.employee_id = t.employee_id
      LEFT JOIN task_assigners ta ON ta.task_id = t.task_id
      LEFT JOIN employees assigner ON assigner.employee_id = ta.assigner_employee_id
      WHERE t.task_id = ?
    `, [taskId]);
    
    if (!taskInfo || taskInfo.length === 0) {
      console.log(`‚ùå –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      return;
    }
    
    const task = taskInfo[0];
    
    // –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log(`\nüìå –ó–ê–î–ê–ß–ê #${task.task_id}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.task || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
    console.log(`üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);
    console.log(`üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assignee_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'} (ID: ${task.assignee_id || 'N/A'})`);
    console.log(`üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ${task.assignee_job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    console.log(`üéØ –ù–∞–∑–Ω–∞—á–∏–ª: ${task.assigner_name || '–°–∏—Å—Ç–µ–º–∞'} (ID: ${task.assigner_id || 'N/A'})`);
    console.log(`üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–∏–≤—à–µ–≥–æ: ${task.assigner_job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    console.log(`üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(task.created_at).toLocaleString('ru-RU')}`);
    console.log(`üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞: ${task.assigned_at ? new Date(task.assigned_at).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`‚è∞ –î–µ–¥–ª–∞–π–Ω: ${task.deadline ? new Date(task.deadline).toLocaleString('ru-RU') : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`üîÑ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${task.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
    const statusHistory = await query(`
      SELECT 
        tsh.old_status,
        tsh.new_status,
        tsh.changed_at,
        tsh.changed_by,
        e.name as changed_by_name,
        e.job as changed_by_job,
        tsh.change_reason
      FROM task_status_history tsh
      LEFT JOIN employees e ON e.employee_id = tsh.changed_by
      WHERE tsh.task_id = ?
      ORDER BY tsh.changed_at ASC
    `, [taskId]);
    
    if (statusHistory && statusHistory.length > 0) {
      console.log(`\nüìà –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–¢–ê–¢–£–°–û–í`);
      console.log('-'.repeat(60));
      
      for (const change of statusHistory) {
        const date = new Date(change.changed_at).toLocaleString('ru-RU');
        const oldStatus = change.old_status || '–ù–æ–≤—ã–π';
        const newStatus = change.new_status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const changedBy = change.changed_by_name || `ID:${change.changed_by}` || '–°–∏—Å—Ç–µ–º–∞';
        const job = change.changed_by_job ? ` (${change.changed_by_job})` : '';
        const reason = change.change_reason ? `\n    üí¨ –ü—Ä–∏—á–∏–Ω–∞: ${change.change_reason}` : '';
        
        console.log(`  ${date}`);
        console.log(`  ${oldStatus} ‚Üí ${newStatus}`);
        console.log(`  üë§ –ò–∑–º–µ–Ω–∏–ª: ${changedBy}${job}${reason}`);
        console.log('');
      }
    } else {
      console.log(`\nüìà –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–¢–ê–¢–£–°–û–í`);
      console.log('-'.repeat(60));
      console.log('üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è.');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ –∑–∞–¥–∞—á–µ
    const explanations = await query(`
      SELECT 
        ee.id,
        ee.explanation_text,
        ee.status as explanation_status,
        ee.requested_at,
        ee.responded_at,
        ee.manager_decision,
        ee.bonus_penalty_amount,
        e.name as employee_name,
        e.job as employee_job
      FROM employee_explanations ee
      LEFT JOIN employees e ON e.employee_id = ee.employee_id
      WHERE ee.task_id = ?
      ORDER BY ee.requested_at DESC
    `, [taskId]);
    
    if (explanations && explanations.length > 0) {
      console.log(`\nüìù –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ï`);
      console.log('-'.repeat(60));
      
      for (const explanation of explanations) {
        const requestedAt = new Date(explanation.requested_at).toLocaleString('ru-RU');
        const respondedAt = explanation.responded_at ? 
          new Date(explanation.responded_at).toLocaleString('ru-RU') : '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
        
        console.log(`üìã ID –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π: ${explanation.id}`);
        console.log(`üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${explanation.employee_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${explanation.employee_job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})`);
        console.log(`üìÖ –ó–∞–ø—Ä–æ—à–µ–Ω–∞: ${requestedAt}`);
        console.log(`üìÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${respondedAt}`);
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${explanation.explanation_status}`);
        console.log(`üí¨ –¢–µ–∫—Å—Ç: ${explanation.explanation_text || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}`);
        
        if (explanation.manager_decision) {
          console.log(`üéØ –†–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: ${explanation.manager_decision}`);
        }
        
        if (explanation.bonus_penalty_amount && explanation.bonus_penalty_amount !== 0) {
          console.log(`üí∞ –°—É–º–º–∞ –±–æ–Ω—É—Å–∞/—à—Ç—Ä–∞—Ñ–∞: ${explanation.bonus_penalty_amount}`);
        }
        
        console.log('');
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∑–∞–¥–∞—á–∏
    const artifacts = await query(`
      SELECT 
        ta.file_name,
        ta.artifact_type,
        ta.file_size,
        ta.uploaded_at,
        e.name as uploaded_by_name
      FROM task_artifacts ta
      LEFT JOIN employees e ON e.employee_id = ta.uploaded_by
      WHERE ta.task_id = ?
      ORDER BY ta.uploaded_at DESC
    `, [taskId]);
    
    if (artifacts && artifacts.length > 0) {
      console.log(`\nüìé –ê–†–¢–ï–§–ê–ö–¢–´`);
      console.log('-'.repeat(60));
      
      for (const artifact of artifacts) {
        const uploadedAt = new Date(artifact.uploaded_at).toLocaleString('ru-RU');
        const fileSize = artifact.file_size ? `${(artifact.file_size / 1024).toFixed(1)} KB` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        console.log(`üìÑ ${artifact.file_name}`);
        console.log(`   –¢–∏–ø: ${artifact.artifact_type}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${fileSize}`);
        console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω: ${uploadedAt} (${artifact.uploaded_by_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`);
        console.log('');
      }
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß–ò`);
    console.log('-'.repeat(60));
    console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞: ${statusHistory ? statusHistory.length : 0}`);
    console.log(`üìù –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${explanations ? explanations.length : 0}`);
    console.log(`üìé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${artifacts ? artifacts.length : 0}`);
    
    // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const createdAt = new Date(task.created_at);
    const now = new Date();
    const timeDiff = now - createdAt;
    const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤ —Ä–∞–±–æ—Ç–µ: ${days} –¥–Ω–µ–π ${hours} —á–∞—Å–æ–≤`);
    
    if (task.deadline) {
      const deadline = new Date(task.deadline);
      const deadlineDiff = deadline - now;
      const deadlineDays = Math.floor(deadlineDiff / (1000 * 60 * 60 * 24));
      
      if (deadlineDiff > 0) {
        console.log(`‚è∞ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞: ${deadlineDays} –¥–Ω–µ–π`);
      } else {
        console.log(`‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞: ${Math.abs(deadlineDays)} –¥–Ω–µ–π`);
      }
    }
    
  } catch (error) {
    log.error('[TASK_DETAILED_HISTORY] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  const args = process.argv.slice(2);
  const taskId = args[0] ? parseInt(args[0]) : null;
  
  if (!taskId) {
    console.log('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∑–∞–¥–∞—á–∏');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node task_detailed_history.js <task_id>');
    console.log('–ü—Ä–∏–º–µ—Ä: node task_detailed_history.js 123');
    process.exit(1);
  }
  
  await showTaskDetailedHistory(taskId);
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
