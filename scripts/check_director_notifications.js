import { assertEnv } from '../src/config/env.js';
import { query } from '../src/config/db.js';
import { log } from '../src/utils/logger.js';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –æ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—É, –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
 */

async function checkDirectorNotifications() {
  try {
    assertEnv();
    
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–ò–†–ï–ö–¢–û–†–£');
    console.log('=' .repeat(80));
    
    // 1. –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –±–æ–ª–µ–µ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    const overdueExplanations = await query(`
      SELECT 
        ee.id,
        ee.task_id,
        ee.employee_id,
        ee.requested_at,
        ee.responded_at,
        ee.status as explanation_status,
        e.name as employee_name,
        e.job as employee_job,
        e.chat_id as employee_chat_id,
        t.task as task_title,
        t.deadline as task_deadline
      FROM employee_explanations ee
      LEFT JOIN employees e ON ee.employee_id = e.employee_id
      LEFT JOIN tasks t ON ee.task_id = t.task_id
      WHERE ee.status = 'pending' 
        AND ee.requested_at < ?
      ORDER BY ee.requested_at ASC
    `, [oneHourAgo]);
    
    console.log(`\n‚è∞ –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ï (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)`);
    console.log('-'.repeat(60));
    
    if (!overdueExplanations || overdueExplanations.length === 0) {
      console.log('‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    } else {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${overdueExplanations.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
      const overdueByEmployee = {};
      for (const explanation of overdueExplanations) {
        const empId = String(explanation.employee_id);
        if (!overdueByEmployee[empId]) {
          overdueByEmployee[empId] = {
            employee: {
              name: explanation.employee_name,
              job: explanation.employee_job,
              chat_id: explanation.employee_chat_id
            },
            explanations: []
          };
        }
        overdueByEmployee[empId].explanations.push(explanation);
      }
      
      console.log(`\nüë• –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û –°–û–¢–†–£–î–ù–ò–ö–ê–ú:`);
      
      for (const [empId, data] of Object.entries(overdueByEmployee)) {
        const { employee, explanations } = data;
        
        console.log(`\nüë§ ${employee.name} (${employee.job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})`);
        console.log(`   üí¨ Chat ID: ${employee.chat_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${explanations.length}`);
        
        for (const explanation of explanations) {
          const requestedAt = new Date(explanation.requested_at);
          const now = new Date();
          const hoursOverdue = Math.floor((now - requestedAt) / (1000 * 60 * 60));
          const minutesOverdue = Math.floor(((now - requestedAt) % (1000 * 60 * 60)) / (1000 * 60));
          
          console.log(`\n   üìå –ó–∞–¥–∞—á–∞ #${explanation.task_id}: ${explanation.task_title}`);
          console.log(`   üìÖ –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏: ${explanation.task_deadline ? new Date(explanation.task_deadline).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`   üìÖ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è: ${requestedAt.toLocaleString('ru-RU')}`);
          console.log(`   ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞: ${hoursOverdue}—á ${minutesOverdue}–º`);
          console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${explanation.explanation_status}`);
        }
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
    console.log(`\nüîî –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–ò–†–ï–ö–¢–û–†–£`);
    console.log('-'.repeat(60));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ExplanationTimeoutService
    try {
      const { ExplanationTimeoutService } = await import('../src/services/ExplanationTimeoutService.js');
      console.log('‚úÖ ExplanationTimeoutService –Ω–∞–π–¥–µ–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
      console.log('üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
      console.log('   node -e "import(\'./src/services/ExplanationTimeoutService.js\').then(m => new m.ExplanationTimeoutService({}).checkOverdueExplanations())"');
      
    } catch (error) {
      console.log('‚ùå ExplanationTimeoutService –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤
    console.log(`\nüëë –ù–ê–°–¢–†–û–ô–ö–ò –î–ò–†–ï–ö–¢–û–†–û–í`);
    console.log('-'.repeat(60));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const directorChatId = process.env.DIRECTOR_CHAT_ID;
    if (directorChatId) {
      console.log(`‚úÖ DIRECTOR_CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${directorChatId}`);
    } else {
      console.log('‚ùå DIRECTOR_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const directors = await query(`
      SELECT 
        employee_id,
        name,
        job,
        chat_id,
        tg_user_id
      FROM employees 
      WHERE job LIKE '%–¥–∏—Ä–µ–∫—Ç–æ—Ä%' 
         OR job LIKE '%—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å%'
         OR name LIKE '%–¥–∏—Ä–µ–∫—Ç–æ—Ä%'
      ORDER BY name
    `);
    
    if (directors && directors.length > 0) {
      console.log(`\nüëë –î–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (${directors.length}):`);
      for (const director of directors) {
        console.log(`   üë§ ${director.name} (ID: ${director.employee_id})`);
        console.log(`      üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${director.job || director.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`      üí¨ Chat ID: ${director.chat_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`      üì± Telegram ID: ${director.tg_user_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log('');
      }
    } else {
      console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤)
    console.log(`\nüìã –õ–û–ì–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô`);
    console.log('-'.repeat(60));
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const logTables = await query("SHOW TABLES LIKE '%log%'");
      if (logTables && logTables.length > 0) {
        console.log('üìä –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤:');
        for (const table of logTables) {
          console.log(`   ${Object.values(table)[0]}`);
        }
      } else {
        console.log('üìù –¢–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤:', error.message);
    }
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
    if (overdueExplanations && overdueExplanations.length > 0) {
      console.log(`\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô`);
      console.log('-'.repeat(60));
      
      console.log('üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—É:');
      console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ExplanationTimeoutService –∑–∞–ø—É—â–µ–Ω');
      console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–¥–µ');
      console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é:');
      console.log('      node -e "import(\'./src/services/ExplanationTimeoutService.js\').then(m => new m.ExplanationTimeoutService({}).checkOverdueExplanations())"');
    }
    
    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò`);
    console.log('-'.repeat(60));
    
    if (overdueExplanations && overdueExplanations.length > 0) {
      console.log('üîß –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:');
      console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ExplanationTimeoutService –∑–∞–ø—É—â–µ–Ω');
      console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—É');
      console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ —É–∫–∞–∑–∞–Ω—ã chat_id');
      console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    } else {
      console.log('‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—Ç');
    }
    
    if (!directorChatId && (!directors || directors.length === 0)) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      console.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DIRECTOR_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      console.log('   2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É employees —Å —É–∫–∞–∑–∞–Ω–∏–µ–º chat_id');
    }
    
    // 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê`);
    console.log('-'.repeat(60));
    console.log(`‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${overdueExplanations ? overdueExplanations.length : 0}`);
    console.log(`üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏: ${overdueExplanations ? new Set(overdueExplanations.map(e => e.employee_id)).size : 0}`);
    console.log(`üëë –î–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${directors ? directors.length : 0}`);
    console.log(`üîî DIRECTOR_CHAT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${directorChatId ? '–î–∞' : '–ù–µ—Ç'}`);
    
  } catch (error) {
    log.error('[CHECK_DIRECTOR_NOTIFICATIONS] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—É:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  await checkDirectorNotifications();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
