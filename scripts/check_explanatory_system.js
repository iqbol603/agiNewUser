import { assertEnv } from '../src/config/env.js';
import { query } from '../src/config/db.js';
import { log } from '../src/utils/logger.js';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –ª–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 */

async function checkExplanatorySystem() {
  try {
    assertEnv();
    
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–•');
    console.log('=' .repeat(80));
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const overdueTasks = await query(`
      SELECT 
        t.task_id,
        t.task,
        t.status,
        t.deadline,
        t.created_at,
        e.name as employee_name,
        e.job as employee_job,
        e.chat_id
      FROM tasks t
      LEFT JOIN employees e ON e.employee_id = t.employee_id
      WHERE t.deadline < NOW() 
        AND t.status NOT IN ('completed', 'closed', 'cancelled')
      ORDER BY t.deadline ASC
    `);
    
    console.log(`\nüìä –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò`);
    console.log('-'.repeat(60));
    
    if (!overdueTasks || overdueTasks.length === 0) {
      console.log('‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    } else {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${overdueTasks.length}`);
      
      for (const task of overdueTasks) {
        const deadline = new Date(task.deadline);
        const now = new Date();
        const overdueDays = Math.floor((now - deadline) / (1000 * 60 * 60 * 24));
        
        console.log(`\nüìå –ó–∞–¥–∞—á–∞ #${task.task_id}: ${task.task}`);
        console.log(`   üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.employee_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'} (${task.employee_job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})`);
        console.log(`   üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleString('ru-RU')}`);
        console.log(`   ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞: ${overdueDays} –¥–Ω–µ–π`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${task.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   üí¨ Chat ID: ${task.chat_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    const explanationRequests = await query(`
      SELECT 
        ee.id,
        ee.task_id,
        ee.employee_id,
        ee.status as explanation_status,
        ee.requested_at,
        ee.responded_at,
        t.task,
        t.deadline,
        e.name as employee_name,
        e.job as employee_job
      FROM employee_explanations ee
      LEFT JOIN tasks t ON t.task_id = ee.task_id
      LEFT JOIN employees e ON e.employee_id = ee.employee_id
      WHERE t.deadline < NOW() 
        AND t.status NOT IN ('completed', 'closed', 'cancelled')
      ORDER BY ee.requested_at DESC
    `);
    
    console.log(`\nüìù –ó–ê–ü–†–û–°–´ –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–• –î–õ–Ø –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –ó–ê–î–ê–ß`);
    console.log('-'.repeat(60));
    
    if (!explanationRequests || explanationRequests.length === 0) {
      console.log('‚ùå –ó–∞–ø—Ä–æ—Å—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      console.log('üí° –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${explanationRequests.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const statusCounts = {};
      for (const req of explanationRequests) {
        const status = req.explanation_status || 'unknown';
        statusCounts[status] = (statusCounts[status] || 0) + 1;
      }
      
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
      for (const [status, count] of Object.entries(statusCounts)) {
        console.log(`   ${status}: ${count}`);
      }
      
      console.log('\nüìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:');
      for (const req of explanationRequests.slice(0, 10)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        const requestedAt = new Date(req.requested_at).toLocaleString('ru-RU');
        const respondedAt = req.responded_at ? 
          new Date(req.responded_at).toLocaleString('ru-RU') : '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
        const deadline = new Date(req.deadline).toLocaleString('ru-RU');
        
        console.log(`\n   üìå –ó–∞–¥–∞—á–∞ #${req.task_id}: ${req.task}`);
        console.log(`   üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${req.employee_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline}`);
        console.log(`   üìù ID –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π: ${req.id}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${req.explanation_status}`);
        console.log(`   üìÖ –ó–∞–ø—Ä–æ—à–µ–Ω–∞: ${requestedAt}`);
        console.log(`   üìÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${respondedAt}`);
      }
      
      if (explanationRequests.length > 10) {
        console.log(`\n   ... –∏ –µ—â–µ ${explanationRequests.length - 10} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ù–ï –∏–º–µ—é—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    const overdueWithoutExplanations = await query(`
      SELECT 
        t.task_id,
        t.task,
        t.deadline,
        e.name as employee_name,
        e.job as employee_job
      FROM tasks t
      LEFT JOIN employees e ON e.employee_id = t.employee_id
      LEFT JOIN employee_explanations ee ON ee.task_id = t.task_id
      WHERE t.deadline < NOW() 
        AND t.status NOT IN ('completed', 'closed', 'cancelled')
        AND ee.id IS NULL
      ORDER BY t.deadline ASC
    `);
    
    console.log(`\n‚ùå –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò –ë–ï–ó –ó–ê–ü–†–û–°–û–í –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–•`);
    console.log('-'.repeat(60));
    
    if (!overdueWithoutExplanations || overdueWithoutExplanations.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç –∑–∞–ø—Ä–æ—Å—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö.');
    } else {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –±–µ–∑ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${overdueWithoutExplanations.length}`);
      
      for (const task of overdueWithoutExplanations) {
        const deadline = new Date(task.deadline);
        const now = new Date();
        const overdueDays = Math.floor((now - deadline) / (1000 * 60 * 60 * 24));
        
        console.log(`\n   üìå –ó–∞–¥–∞—á–∞ #${task.task_id}: ${task.task}`);
        console.log(`   üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.employee_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`);
        console.log(`   üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleString('ru-RU')}`);
        console.log(`   ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞: ${overdueDays} –¥–Ω–µ–π`);
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    console.log(`\n‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´ –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–•`);
    console.log('-'.repeat(60));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    const explanationTable = await query("SHOW TABLES LIKE 'employee_explanations'");
    if (explanationTable && explanationTable.length > 0) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ employee_explanations —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      const tableStructure = await query("DESCRIBE employee_explanations");
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
      for (const column of tableStructure) {
        console.log(`   ${column.Field}: ${column.Type} ${column.Null === 'NO' ? 'NOT NULL' : 'NULL'}`);
      }
    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ employee_explanations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò`);
    console.log('-'.repeat(60));
    
    if (overdueTasks && overdueTasks.length > 0) {
      if (!explanationRequests || explanationRequests.length === 0) {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ReportScheduler.js');
        console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ExplanatoryService —Ä–∞–±–æ—Ç–∞–µ—Ç');
      } else if (overdueWithoutExplanations && overdueWithoutExplanations.length > 0) {
        console.log('üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∏–º–µ—é—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤');
        console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
      } else {
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }
    } else {
      console.log('‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç, —Å–∏—Å—Ç–µ–º–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
    
  } catch (error) {
    log.error('[CHECK_EXPLANATORY_SYSTEM] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  await checkExplanatorySystem();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
