import { assertEnv } from '../src/config/env.js';
import { query } from '../src/config/db.js';
import { log } from '../src/utils/logger.js';

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∏ –±–æ–Ω—É—Å–∞–º/—à—Ç—Ä–∞—Ñ–∞–º
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –∫—Ç–æ –Ω–∞–ø–∏—Å–∞–ª, –∫—Ç–æ –±—ã–ª –ª–∏—à–µ–Ω –±–æ–Ω—É—Å–æ–≤, –æ–±—â–∏–µ —Å—É–º–º—ã
 */

async function generateDirectorReport() {
  try {
    assertEnv();
    
    console.log('üëë –û–¢–ß–ï–¢ –î–õ–Ø –î–ò–†–ï–ö–¢–û–†–ê –ü–û –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ú –ò –ë–û–ù–£–°–ê–ú');
    console.log('=' .repeat(80));
    console.log(`üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
    console.log('=' .repeat(80));
    
    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º
    const totalExplanations = await query(`
      SELECT COUNT(*) as total FROM employee_explanations
    `);
    
    const statusStats = await query(`
      SELECT 
        status,
        COUNT(*) as count
      FROM employee_explanations 
      GROUP BY status
      ORDER BY count DESC
    `);
    
    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ú:');
    console.log('-'.repeat(50));
    console.log(`üìù –í—Å–µ–≥–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${totalExplanations[0].total}`);
    
    console.log('\nüìà –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    for (const stat of statusStats) {
      const statusName = {
        'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è',
        'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ',
        'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
        'bonus_penalty': 'üí∞ –° –±–æ–Ω—É—Å–∞–º–∏/—à—Ç—Ä–∞—Ñ–∞–º–∏'
      }[stat.status] || stat.status;
      console.log(`   ${statusName}: ${stat.count}`);
    }
    
    // 2. –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏
    const employeesWithExplanations = await query(`
      SELECT 
        e.employee_id,
        e.name,
        e.job,
        e.chat_id,
        COUNT(ee.id) as explanation_count,
        SUM(CASE WHEN ee.status = 'pending' THEN 1 ELSE 0 END) as pending_count,
        SUM(CASE WHEN ee.status = 'accepted' THEN 1 ELSE 0 END) as accepted_count,
        SUM(CASE WHEN ee.status = 'rejected' THEN 1 ELSE 0 END) as rejected_count,
        SUM(CASE WHEN ee.status = 'bonus_penalty' THEN 1 ELSE 0 END) as bonus_penalty_count,
        SUM(COALESCE(ee.bonus_penalty_amount, 0)) as total_bonus_penalty
      FROM employees e
      INNER JOIN employee_explanations ee ON ee.employee_id = e.employee_id
      GROUP BY e.employee_id, e.name, e.job, e.chat_id
      ORDER BY explanation_count DESC, total_bonus_penalty ASC
    `);
    
    console.log('\nüë• –°–û–¢–†–£–î–ù–ò–ö–ò –° –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ú–ò:');
    console.log('=' .repeat(80));
    
    if (employeesWithExplanations && employeesWithExplanations.length > 0) {
      for (const emp of employeesWithExplanations) {
        console.log(`\nüë§ ${emp.name} (ID: ${emp.employee_id})`);
        console.log(`   üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${emp.job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`   üí¨ Chat ID: ${emp.chat_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   üìù –í—Å–µ–≥–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${emp.explanation_count}`);
        console.log(`   ‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: ${emp.pending_count}`);
        console.log(`   ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: ${emp.accepted_count}`);
        console.log(`   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${emp.rejected_count}`);
        console.log(`   üí∞ –° –±–æ–Ω—É—Å–∞–º–∏/—à—Ç—Ä–∞—Ñ–∞–º–∏: ${emp.bonus_penalty_count}`);
        
        if (emp.total_bonus_penalty && emp.total_bonus_penalty !== 0) {
          const amount = parseFloat(emp.total_bonus_penalty);
          const type = amount > 0 ? 'üí∞ –ë–æ–Ω—É—Å' : 'üí∏ –®—Ç—Ä–∞—Ñ';
          console.log(`   ${type}: ${Math.abs(amount)}`);
        }
      }
    } else {
      console.log('‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }
    
    // 3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ–Ω—É—Å–∞–º/—à—Ç—Ä–∞—Ñ–∞–º
    const bonusPenaltyDetails = await query(`
      SELECT 
        ee.id,
        ee.task_id,
        ee.employee_id,
        ee.bonus_penalty_amount,
        ee.manager_decision,
        ee.requested_at,
        ee.responded_at,
        e.name as employee_name,
        e.job as employee_job,
        t.task as task_title
      FROM employee_explanations ee
      LEFT JOIN employees e ON e.employee_id = ee.employee_id
      LEFT JOIN tasks t ON t.task_id = ee.task_id
      WHERE ee.bonus_penalty_amount IS NOT NULL 
        AND ee.bonus_penalty_amount != 0
      ORDER BY ee.requested_at DESC
    `);
    
    console.log('\nüí∞ –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–û–ù–£–°–ê–ú/–®–¢–†–ê–§–ê–ú:');
    console.log('=' .repeat(80));
    
    if (bonusPenaltyDetails && bonusPenaltyDetails.length > 0) {
      let totalBonuses = 0;
      let totalPenalties = 0;
      let bonusCount = 0;
      let penaltyCount = 0;
      
      console.log(`üìä –í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤ —Å –±–æ–Ω—É—Å–∞–º–∏/—à—Ç—Ä–∞—Ñ–∞–º–∏: ${bonusPenaltyDetails.length}`);
      
      for (const detail of bonusPenaltyDetails) {
        const amount = parseFloat(detail.bonus_penalty_amount);
        const requestedAt = new Date(detail.requested_at).toLocaleString('ru-RU');
        const respondedAt = detail.responded_at ? 
          new Date(detail.responded_at).toLocaleString('ru-RU') : '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
        
        if (amount > 0) {
          totalBonuses += amount;
          bonusCount++;
        } else {
          totalPenalties += Math.abs(amount);
          penaltyCount++;
        }
        
        const type = amount > 0 ? 'üí∞ –ë–û–ù–£–°' : 'üí∏ –®–¢–†–ê–§';
        console.log(`\n${type} ${Math.abs(amount)}`);
        console.log(`   üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${detail.employee_name} (${detail.employee_job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})`);
        console.log(`   üìå –ó–∞–¥–∞—á–∞: #${detail.task_id} - ${detail.task_title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
        console.log(`   üìÖ –ó–∞–ø—Ä–æ—à–µ–Ω–∞: ${requestedAt}`);
        console.log(`   üìÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${respondedAt}`);
        if (detail.manager_decision) {
          console.log(`   üéØ –†–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: ${detail.manager_decision}`);
        }
      }
      
      console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
      console.log(`   üí∞ –ë–æ–Ω—É—Å–æ–≤ –≤—ã–¥–∞–Ω–æ: ${bonusCount} –Ω–∞ —Å—É–º–º—É ${totalBonuses}`);
      console.log(`   üí∏ –®—Ç—Ä–∞—Ñ–æ–≤ –Ω–∞–ª–æ–∂–µ–Ω–æ: ${penaltyCount} –Ω–∞ —Å—É–º–º—É ${totalPenalties}`);
      console.log(`   üìä –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${totalBonuses - totalPenalties}`);
      
    } else {
      console.log('‚ùå –°–ª—É—á–∞–µ–≤ —Å –±–æ–Ω—É—Å–∞–º–∏/—à—Ç—Ä–∞—Ñ–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }
    
    // 4. –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±–µ–∑ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    const employeesWithoutExplanations = await query(`
      SELECT 
        employee_id,
        name,
        job,
        chat_id
      FROM employees 
      WHERE employee_id NOT IN (
        SELECT DISTINCT employee_id 
        FROM employee_explanations 
        WHERE employee_id IS NOT NULL
      )
      ORDER BY name
    `);
    
    console.log('\nüë• –°–û–¢–†–£–î–ù–ò–ö–ò –ë–ï–ó –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–•:');
    console.log('=' .repeat(80));
    
    if (employeesWithoutExplanations && employeesWithoutExplanations.length > 0) {
      console.log(`üìä –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${employeesWithoutExplanations.length}`);
      for (const emp of employeesWithoutExplanations) {
        console.log(`   üë§ ${emp.name} (ID: ${emp.employee_id}) - ${emp.job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      }
    } else {
      console.log('‚úÖ –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ.');
    }
    
    // 5. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    const overdueExplanations = await query(`
      SELECT 
        ee.id,
        ee.task_id,
        ee.employee_id,
        ee.requested_at,
        e.name as employee_name,
        e.job as employee_job,
        t.task as task_title
      FROM employee_explanations ee
      LEFT JOIN employees e ON e.employee_id = ee.employee_id
      LEFT JOIN tasks t ON t.task_id = ee.task_id
      WHERE ee.status = 'pending' 
        AND ee.requested_at < ?
      ORDER BY ee.requested_at ASC
    `, [oneHourAgo]);
    
    console.log('\n‚è∞ –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ï (–±–æ–ª–µ–µ 1 —á–∞—Å–∞):');
    console.log('=' .repeat(80));
    
    if (overdueExplanations && overdueExplanations.length > 0) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${overdueExplanations.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
      const overdueByEmployee = {};
      for (const exp of overdueExplanations) {
        const empId = exp.employee_id;
        if (!overdueByEmployee[empId]) {
          overdueByEmployee[empId] = {
            name: exp.employee_name,
            job: exp.employee_job,
            count: 0
          };
        }
        overdueByEmployee[empId].count++;
      }
      
      for (const [empId, data] of Object.entries(overdueByEmployee)) {
        console.log(`   üë§ ${data.name} (${data.job || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}): ${data.count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö`);
      }
    } else {
      console.log('‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—Ç.');
    }
    
    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ò–†–ï–ö–¢–û–†–ê:');
    console.log('=' .repeat(80));
    
    if (employeesWithExplanations && employeesWithExplanations.length > 0) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
      const topOffenders = employeesWithExplanations
        .filter(emp => emp.explanation_count >= 3)
        .sort((a, b) => b.explanation_count - a.explanation_count);
      
      if (topOffenders.length > 0) {
        console.log('‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —á–∞—Å—Ç—ã–º–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ (3+ —Ä–∞–∑):');
        for (const emp of topOffenders) {
          console.log(`   üë§ ${emp.name}: ${emp.explanation_count} –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö`);
        }
        console.log('   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è');
      }
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –±–æ–ª—å—à–∏–º–∏ —à—Ç—Ä–∞—Ñ–∞–º–∏
      const highPenalties = employeesWithExplanations
        .filter(emp => emp.total_bonus_penalty < -100)
        .sort((a, b) => a.total_bonus_penalty - b.total_bonus_penalty);
      
      if (highPenalties.length > 0) {
        console.log('\nüí∏ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –±–æ–ª—å—à–∏–º–∏ —à—Ç—Ä–∞—Ñ–∞–º–∏ (100+):');
        for (const emp of highPenalties) {
          console.log(`   üë§ ${emp.name}: —à—Ç—Ä–∞—Ñ ${Math.abs(emp.total_bonus_penalty)}`);
        }
      }
    }
    
    if (overdueExplanations && overdueExplanations.length > 0) {
      console.log('\n‚è∞ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º');
      console.log('   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–∞–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö');
    }
    
    console.log('\nüìä –û–¢–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù');
    console.log('=' .repeat(80));
    
  } catch (error) {
    log.error('[DIRECTOR_EXPLANATIONS_REPORT] –û—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  await generateDirectorReport();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
