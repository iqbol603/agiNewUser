// import fs from 'fs';
// import TelegramBot from 'node-telegram-bot-api';
// import { ENV } from '../config/env.js';
// import { log } from '../utils/logger.js';
// import { FileStorage } from '../services/FileStorage.js';
// import { OpenAIService } from '../services/OpenAIService.js';
// import { AssistantService } from '../services/AssistantService.js';
// import { EmployeesService } from '../services/EmployeesService.js';
// import { Notifier } from '../services/Notifier.js';
// import { ToolRouter } from '../services/ToolRouter.js';
// import { TelegramUI } from './TelegramUI.js';
// import { AccessControlService } from '../services/AccessControlService.js';
// import { ApiClient } from '../services/ApiClient.js';

// export class BotApp {
// 	constructor() {
// 		this.bot = new TelegramBot(ENV.TELEGRAM_TOKEN, { polling: true });

// 		const api = new ApiClient();
// 		this.files = new FileStorage();
// 		this.openai = new OpenAIService();
// 		this.assistant = new AssistantService({ bot: this.bot});
// 		this.employees = new EmployeesService(api);
// 		this.notifier = new Notifier(this.bot);
// 		this.tools = new ToolRouter({ api, employees: this.employees, notifier: this.notifier });
// 		this.acl = new AccessControlService({ employees: this.employees });
// 		this.uiState = new Map();
// 		this.pendingAssign = new Map();

// 		this.bindHandlers();
// 		log.info('BotApp initialized');
// 	}

// 	bindHandlers() {
// 		this.bot.onText(/^(\/start|\/menu)$/, async (msg) => {
// 			const auth = await this.acl.authorize(msg.from?.id);
// 			if (!auth.allowed) {
// 				console.log('not auth', msg.from?.id);
// 				return;
// 			}
// 			await this.bot.sendMessage(
// 				msg.chat.id,
// 				'üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è —Å–ø—Ä–æ—à—É –ò–ò-–∞–≥–µ–Ω—Ç–∞ –∏/–∏–ª–∏ –≤—ã–ø–æ–ª–Ω—é –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏.\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
// 				TelegramUI.mainMenuInline()
// 			);
// 		});

// 		this.bot.on('callback_query', async (q) => this.onCallbackQuery(q));
// 		this.bot.on('message', async (msg) => this.onMessage(msg));
// 	}

// 	async start() { }
// 	async stop() { }

// 	async onCallbackQuery(q) {
// 		const auth = await this.acl.authorize(q.from?.id);
// 		if (!auth.allowed) return;
// 	}

// 	async onMessage(msg) {
// 		console.log('[TELEGRAM][GET][MESSAGE]', msg);

// 		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –≥–æ–ª–æ—Å –æ—Ç–∫–ª–æ–Ω—è–µ–º
// 		if (!msg.text && !msg.voice) return;
// 		if (msg.text && msg.text.startsWith('/')) return;

// 		// –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
// 		const auth = await this.acl.authorize(msg.from?.id);

// 		console.log('auth', auth, msg.from?.id);
// 		if (!auth.allowed) return;

// 		const chatId = msg.chat.id;
		
// 		if (msg.text && !msg.text.startsWith('/')) {
// 			await this.bot.sendMessage(chatId, '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...');
// 			const aiReply = await this.assistant.ask(msg.text, { chatId, employee: auth.employee });

// 			console.log('===============================================================');
// 			console.log('[TELEGRAM][REPLY]', aiReply);
// 			console.log('===============================================================');
// 			await this.bot.sendMessage(chatId, aiReply);

// 			try {
// 				const buf = await this.openai.speak(aiReply);
// 				const out = await this.files.saveBuffer(buf, 'ogg');
// 				await this.bot.sendVoice(chatId, { source: fs.createReadStream(out), filename: 'voice.ogg', contentType: 'audio/ogg' });
// 			} catch { }

// 			return;
// 		}

// 		if (msg.voice) {
// 			try {
// 				await this.bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å‚Ä¶');
// 				const localPath = await this.files.downloadTelegramFile(this.bot, msg.voice.file_id, 'ogg');
// 				const text = await this.openai.transcribe(localPath);
// 				await this.bot.sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´${text}¬ª`);

// 				await this.bot.sendMessage(chatId, 'üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑‚Ä¶');
// 				const aiReply = await this.assistant.ask(text, { chatId, employee: auth.employee });
// 				await this.bot.sendMessage(chatId, aiReply);

// 				try {
// 					const buf = await this.openai.speak(aiReply);
// 					const out = await this.files.saveBuffer(buf, 'ogg');
// 					// console.log("jjj", out, "pp", buf);
// 					// // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
// 					// await this.bot.sendVoice(chatId, {
// 					// 	source: fs.createReadStream(out),
// 					// 	filename: 'voice.ogg',
// 					// 	contentType: 'audio/ogg'
// 					// });
// 					const voicePath = out;
// 					// –í–∞–∂–Ω–æ: sendVoice —Ç—Ä–µ–±—É–µ—Ç OGG/Opus. –ï—Å–ª–∏ —É —Ç–µ–±—è mp3 ‚Äî —Å–º. –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–∏–∂–µ.

// 					await this.bot.sendVoice(
// 						chatId,
// 						fs.createReadStream(voicePath),       // <‚Äî Stream/Buffer/–ø—É—Ç—å
// 						// { caption: '–û—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º' },         // options
// 						{ filename: 'voice.ogg' }             // fileOptions
// 					);
// 				} catch { }
// 			} catch (e) {
// 				log.error('[VOICE ERROR]', e?.message || e);
// 				await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
// 			}
// 		}
// 	}
// }

// src/bot/BotApp.js
import fs from 'fs';
import TelegramBot from 'node-telegram-bot-api';
import { ENV } from '../config/env.js';
import { log } from '../utils/logger.js';
import { FileStorage } from '../services/FileStorage.js';
import { OpenAIService } from '../services/OpenAIService.js';
import { AssistantService } from '../services/AssistantService.js';
import { EmployeesService } from '../services/EmployeesService.js';
import { Notifier } from '../services/Notifier.js';
import { ToolRouter } from '../services/ToolRouter.js';
import { TelegramUI } from './TelegramUI.js';
import { AccessControlService } from '../services/AccessControlService.js';
import { ApiClient } from '../services/ApiClient.js';
import { ExplanatoryService } from '../services/ExplanatoryService.js';
import { startDirectorHourlyReportScheduler,startAssigneeReminderScheduler5min } from '../services/ReportScheduler.js';
import { startExplanationTimeoutService } from '../services/ExplanationTimeoutService.js';
import { startTaskStatusUpdater } from '../services/TaskStatusUpdater.js';
import { startBonusPenaltyService } from '../services/BonusPenaltyService.js';
import { query } from '../config/db.js';

// helper: "879574025" -> 879574025 (–µ—Å–ª–∏ —á–∏—Å–ª–æ), –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∫–∞
function toNumericIfPossible(v) {
  if (v === null || v === undefined) return v;
  const s = String(v).trim();
  if (/^-?\d+$/.test(s)) return Number(s);
  return s;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫ –ë–î
function normalizeTaskStatus(s) {
  const x = String(s || '').trim().toLowerCase();
  if (x === '–≤ —Ä–∞–±–æ—Ç–µ' || x === 'doing' || x === 'progress') return '–í —Ä–∞–±–æ—Ç–µ';
  if (x === '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' || x === 'review') return '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ';
  if (x === '–∑–∞–≤–µ—Ä—à–µ–Ω–∞' || x === '–≥–æ—Ç–æ–≤–æ' || x === '—Å–¥–µ–ª–∞–Ω–æ' || x === 'done' || x === 'complete') return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
  if (x === '–æ—Ç–ª–æ–∂–µ–Ω–∞' || x === 'later' || x === 'deferred') return '–û—Ç–ª–æ–∂–µ–Ω–∞';
  if (x === '–æ—Ç–º–µ–Ω–µ–Ω–∞' || x === 'cancel') return '–û—Ç–º–µ–Ω–µ–Ω–∞';
  if (x === '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è' || x === '–∂–¥—ë–º' || x === '–æ–∂–∏–¥–∞–Ω–∏–µ' || x === '–±–ª–æ–∫' || x === 'blocked') return '–í –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è';
  return '–í —Ä–∞–±–æ—Ç–µ';
}

export class BotApp {
  constructor() {
    this.bot = new TelegramBot(ENV.TELEGRAM_TOKEN, { polling: true });

    this.api = new ApiClient();
    this.files = new FileStorage();
    this.openai = new OpenAIService();
    this.assistant = new AssistantService({ bot: this.bot }); // <-- —Ñ–∏–∫—Å
    this.employees = new EmployeesService(this.api);
    this.notifier = new Notifier(this.bot);
    this.explanatory = new ExplanatoryService();
    this.tools = new ToolRouter({ api: this.api, employees: this.employees, notifier: this.notifier });
    this.acl = new AccessControlService({ employees: this.employees });
    this.uiState = new Map();
    this.pendingAssign = new Map();

    this.bindHandlers();
    log.info('BotApp initialized');

	    // üïí –ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—É (Asia/Dushanbe)
    process.env.TZ = process.env.TZ || 'Asia/Dushanbe';
    startDirectorHourlyReportScheduler({ api: this.api, toolRouter: this.tools, notifier: this.notifier, explanatoryService: this.explanatory });
    startAssigneeReminderScheduler5min({ api: this.api, toolRouter: this.tools, notifier: this.notifier });
    
    // üö® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
    startExplanationTimeoutService({ 
      toolRouter: this.tools, 
      notifier: this.notifier, 
      explanatoryService: this.explanatory 
    });
    
    // üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
    startTaskStatusUpdater({ 
      toolRouter: this.tools, 
      notifier: this.notifier, 
      api: this.api 
    });
    
    // üí∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ–Ω—É—Å–æ–≤ –∏ –ª–∏—à–µ–Ω–∏–µ –∑–∞ 3+ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤ –º–µ—Å—è—Ü (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
    startBonusPenaltyService({ 
      toolRouter: this.tools, 
      notifier: this.notifier 
    });
  }

  bindHandlers() {
    this.bot.onText(/^(\/start|\/menu)$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed) return;

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
      if (auth.employee.user_role === 'manager') {
        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã', callback_data: 'leadership_analyze_team' },
                { text: 'üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç', callback_data: 'leadership_strategic_report' }
              ],
              [
                { text: 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é', callback_data: 'leadership_suggest_improvements' },
                { text: 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è', callback_data: 'leadership_auto_decide' }
              ],
              [
                { text: 'üìù –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ', callback_data: 'leadership_explanations' },
                { text: 'üö´ –õ–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤', callback_data: 'leadership_penalty_candidates' }
              ],
              [
                { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'leadership_all_tasks' }
              ],
              [
                { text: 'üîç –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫', callback_data: 'ai_assistant' },
                { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'leadership_refresh' }
              ]
            ]
          }
        };

        await this.bot.sendMessage(
          msg.chat.id,
          `üëë **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${auth.employee.name}!**\n\n` +
          '–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ **–†–£–ö–û–í–û–î–ò–¢–ï–õ–¨** —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π.\n\n' +
          '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          { parse_mode: 'Markdown', ...keyboard }
        );
      } else {
        // –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        await this.bot.sendMessage(
          msg.chat.id,
          `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${auth.employee.name}!\n\n` +
          'üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è —Å–ø—Ä–æ—à—É –ò–ò-–∞–≥–µ–Ω—Ç–∞ –∏/–∏–ª–∏ –≤—ã–ø–æ–ª–Ω—é –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏.\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
          TelegramUI.mainMenuInline()
        );
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π
    this.bot.onText(/^\/explanation\s+(\d+)\s+(.+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed) return;

      const explanationId = Number(match[1]);
      const explanationText = match[2];

      try {
        const result = await this.tools.route('submit_explanation', {
          explanationId: explanationId,
          explanationText: explanationText
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok) {
          await this.bot.sendMessage(msg.chat.id, '‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É.');
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤)
    this.bot.onText(/^\/explanations$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed) return;

      if (auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ.');
        return;
      }

      try {
        const result = await this.tools.route('list_pending_explanations', {
          limit: 10
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok && result.explanations.length > 0) {
          let message = 'üìù –û–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:\n\n';
          
          for (const exp of result.explanations) {
            message += `ID: ${exp.id}\n`;
            message += `–ó–∞–¥–∞—á–∞: ${exp.task}\n`;
            message += `–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${exp.employee_name}\n`;
            message += `–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: ${exp.explanation_text}\n`;
            message += `–î–∞—Ç–∞: ${new Date(exp.responded_at).toLocaleString('ru-RU')}\n`;
            message += `\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:\n`;
            message += `/accept ${exp.id} [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] - –ø—Ä–∏–Ω—è—Ç—å\n`;
            message += `/reject ${exp.id} [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å\n`;
            message += `/penalty ${exp.id} [—Å—É–º–º–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] - –Ω–∞–∫–∞–∑–∞—Ç—å\n\n`;
          }
          
          await this.bot.sendMessage(msg.chat.id, message);
        } else {
          await this.bot.sendMessage(msg.chat.id, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö.');
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö.');
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤)
    // –§–æ—Ä–º–∞—Ç: /update_task <id> [title="..."] [desc="..."] [deadline="..."] [priority=...] [assignee="–§–ò–û"]
    this.bot.onText(/^\/update_task\s+(\d+)(.*)$/i, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.');
        return;
      }

      const taskId = Number(match[1]);
      const rest = match[2] || '';

      // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–∞ key="value" key=value
      const args = {};
      const regexKV = /(title|desc|deadline|priority|assignee)\s*=\s*("([^"]*)"|([^\s]+))/gi;
      let m;
      while ((m = regexKV.exec(rest)) !== null) {
        const key = m[1];
        const val = (m[3] ?? m[4] ?? '').trim();
        args[key] = val;
      }

      // –ú—ç–ø–ø–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
      const payload = { taskId };
      if (args.title) payload.title = args.title;
      if (args.desc) payload.desc = args.desc;
      if (args.deadline) payload.deadline = args.deadline;
      if (args.priority) payload.priority = args.priority;
      if (args.assignee) payload.assigneeName = args.assignee;

      try {
        const res = await this.tools.route('update_task', payload, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });
        if (res.ok) {
          await this.bot.sendMessage(msg.chat.id, `‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`);
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${res.error}`);
        }
      } catch (e) {
        await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${e?.message || e}`);
      }
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω (–º–µ–Ω–µ–¥–∂–µ—Ä/–¥–∏—Ä–µ–∫—Ç–æ—Ä)
    // –ü—Ä–∏–º–µ—Ä: /set_deadline 3 "—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"
    this.bot.onText(/^\/set_deadline\s+(\d+)\s+(.+)$/i, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã.');
        return;
      }
      const taskId = Number(match[1]);
      const deadline = match[2].trim();
      try {
        const res = await this.tools.route('set_deadline', { taskId, deadline }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });
        if (res.ok) {
          await this.bot.sendMessage(msg.chat.id, `‚úÖ –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ #${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${res.deadline}`);
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${res.error}`);
        }
      } catch (e) {
        await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞: ${e?.message || e}`);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π
    this.bot.onText(/^\/accept\s+(\d+)\s+(.+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        return;
      }

      const explanationId = Number(match[1]);
      const comment = match[2];

      try {
        const result = await this.tools.route('review_explanation', {
          explanationId: explanationId,
          decision: 'accept',
          managerDecision: comment
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok) {
          await this.bot.sendMessage(msg.chat.id, '‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–Ω—è—Ç–∞.');
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π
    this.bot.onText(/^\/reject\s+(\d+)\s+(.+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        return;
      }

      const explanationId = Number(match[1]);
      const comment = match[2];

      try {
        const result = await this.tools.route('review_explanation', {
          explanationId: explanationId,
          decision: 'reject',
          managerDecision: comment
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok) {
          await this.bot.sendMessage(msg.chat.id, '‚ùå –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è (–ª–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞)
    this.bot.onText(/^\/penalty\s+(\d+)\s+(\d+(?:\.\d+)?)\s+(.+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        return;
      }

      const explanationId = Number(match[1]);
      const penaltyAmount = Number(match[2]);
      const comment = match[3];

      try {
        const result = await this.tools.route('review_explanation', {
          explanationId: explanationId,
          decision: 'penalty',
          managerDecision: comment,
          bonusPenaltyAmount: penaltyAmount
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok) {
          await this.bot.sendMessage(msg.chat.id, `üí∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ª–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${penaltyAmount} —Å–æ–º.`);
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ª–∏—à–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ (3+ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤ –º–µ—Å—è—Ü)
    this.bot.onText(/^\/penalty_bonus\s+(\d+)\s+(\d+)\s+(.+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        return;
      }

      const employeeId = Number(match[1]);
      const bonusAmount = Number(match[2]);
      const comment = match[3];

      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        const employees = await this.api.get('employees');
        const employee = employees.find(emp => emp.employee_id === employeeId);
        
        if (!employee) {
          await this.bot.sendMessage(msg.chat.id, '‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }

        log.info(`[BotApp] –õ–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞: ${employee.name}, —Å—É–º–º–∞: ${bonusAmount}, –ø—Ä–∏—á–∏–Ω–∞: ${comment}`);

        await this.bot.sendMessage(msg.chat.id, 
          `üí∞ –ë–û–ù–£–° –õ–ò–®–ï–ù\n\n` +
          `–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${employee.name}\n` +
          `–°—É–º–º–∞: ${bonusAmount} —Å–æ–º\n` +
          `–ü—Ä–∏—á–∏–Ω–∞: ${comment}\n` +
          `–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å chat_id –∏ —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω)
        try {
          if (employee.chat_id) {
            await this.bot.sendMessage(
              toNumericIfPossible(employee.chat_id),
              `üí∞ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –õ–ò–®–ï–ù–ò–ò –ë–û–ù–£–°–ê\n\n` +
              `–í–∞–º –ª–∏—à–µ–Ω –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ ${bonusAmount} —Å–æ–º\n` +
              `–ü—Ä–∏—á–∏–Ω–∞: ${comment}\n` +
              `–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`
            );
          } else {
            await this.bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω chat_id ‚Äî –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
          }
        } catch (notifyErr) {
          log.error('[BotApp] –û—à–∏–±–∫–∞ –ª–∏—à–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:', notifyErr?.message || notifyErr);
          await this.bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω).');
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ –ª–∏—à–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
        try {
          const allEmployees = await this.api.get('employees');
          const notificationMessage = `üö® –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í–°–ï–ú –°–û–¢–†–£–î–ù–ò–ö–ê–ú\n\n` +
            `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employee.name} –ª–∏—à–µ–Ω –±–æ–Ω—É—Å–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${bonusAmount} —Å–æ–º\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${comment}\n` +
            `–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}\n\n` +
            `–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–µ.`;

          for (const emp of allEmployees) {
            if (emp.chat_id && emp.employee_id !== employeeId) {
              try {
                await this.bot.sendMessage(emp.chat_id, notificationMessage);
              } catch (notifyError) {
                log.warn(`[BotApp] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${emp.name}:`, notifyError.message);
              }
            }
          }
        } catch (notifyAllError) {
          log.error('[BotApp] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', notifyAllError.message);
        }

      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –ª–∏—à–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∏—à–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∞—Å–∞ –Ω–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é
    this.bot.onText(/^\/give_extra_hour\s+(\d+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.');
        return;
      }

      const employeeId = match[1];
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const { query } = await import('../config/db.js');
        await query(`
          UPDATE employee_explanations 
          SET requested_at = NOW() 
          WHERE employee_id = ? AND status = 'pending'
        `, [employeeId]);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        const [employeeRows] = await query(`
          SELECT name, chat_id FROM employees WHERE employee_id = ?
        `, [employeeId]);

        if (employeeRows && employeeRows.chat_id) {
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
          await this.notifier.sendText(
            employeeRows.chat_id,
            `‚è∞ –í–ê–ú –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–û –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –í–†–ï–ú–Ø\n\n` +
            `–î–∏—Ä–µ–∫—Ç–æ—Ä –¥–∞–ª –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Å –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö.\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /explanation [ID_–∑–∞–¥–∞—á–∏] [–≤–∞—à–µ_–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]`
          );
        }

        await this.bot.sendMessage(
          msg.chat.id,
          `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫—É ${employeeRows?.name || 'ID: ' + employeeId} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Å –¥–ª—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö`
        );
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
      }
    });

    // –ö–æ–º–∞–Ω–¥—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    this.bot.onText(/^\/analyze_team$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.');
        return;
      }

      try {
        const { DecisionEngine } = await import('../services/DecisionEngine.js');
        const { LeadershipCommands } = await import('../services/LeadershipCommands.js');
        
        const decisionEngine = new DecisionEngine(this.api, this.employees);
        const leadership = new LeadershipCommands(decisionEngine, this.tools);
        
        const analysis = await leadership.analyzeTeam();
        await this.bot.sendMessage(msg.chat.id, analysis);
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–º–∞–Ω–¥—ã.');
      }
    });

    this.bot.onText(/^\/strategic_report$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã.');
        return;
      }

      try {
        const { DecisionEngine } = await import('../services/DecisionEngine.js');
        const { LeadershipCommands } = await import('../services/LeadershipCommands.js');
        
        const decisionEngine = new DecisionEngine(this.api, this.employees);
        const leadership = new LeadershipCommands(decisionEngine, this.tools);
        
        const report = await leadership.generateStrategicReport();
        await this.bot.sendMessage(msg.chat.id, report);
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞.');
      }
    });

    this.bot.onText(/^\/suggest_improvements$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.');
        return;
      }

      try {
        const { DecisionEngine } = await import('../services/DecisionEngine.js');
        const { LeadershipCommands } = await import('../services/LeadershipCommands.js');
        
        const decisionEngine = new DecisionEngine(this.api, this.employees);
        const leadership = new LeadershipCommands(decisionEngine, this.tools);
        
        const suggestions = await leadership.suggestImprovements();
        await this.bot.sendMessage(msg.chat.id, suggestions);
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.');
      }
    });

    this.bot.onText(/^\/auto_decide$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è.');
        return;
      }

      try {
        const { DecisionEngine } = await import('../services/DecisionEngine.js');
        const { LeadershipCommands } = await import('../services/LeadershipCommands.js');
        
        const decisionEngine = new DecisionEngine(this.api, this.employees);
        const leadership = new LeadershipCommands(decisionEngine, this.tools);
        
        const decisions = await leadership.autoDecideOnTasks();
        await this.bot.sendMessage(msg.chat.id, decisions);
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
    this.bot.onText(/^\/leadership$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.');
        return;
      }

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã', callback_data: 'leadership_analyze_team' },
              { text: 'üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç', callback_data: 'leadership_strategic_report' }
            ],
            [
              { text: 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é', callback_data: 'leadership_suggest_improvements' },
              { text: 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è', callback_data: 'leadership_auto_decide' }
            ],
            [
              { text: 'üìù –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ', callback_data: 'leadership_explanations' },
              { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'leadership_all_tasks' }
            ],
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'leadership_refresh' },
              { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'leadership_close' }
            ]
          ]
        }
      };

      await this.bot.sendMessage(msg.chat.id, 
        'üëë **–ü–ê–ù–ï–õ–¨ –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø**\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π:', 
        { parse_mode: 'Markdown', ...keyboard }
      );
    });

    this.bot.on('callback_query', async (q) => this.onCallbackQuery(q));
    this.bot.on('message', async (msg) => this.onMessage(msg));
  }

  async start() {}
  async stop() {}

  async onCallbackQuery(q) {
    try {
      const auth = await this.acl.authorize(q.from?.id);
      if (!auth.allowed) {
        await this.bot.answerCallbackQuery(q.id, { text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', show_alert: true });
        return;
      }

      const data = q.data || '';

      // –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: task_status|<id>|<status>
      let m = data.match(/^task_status\|(\d+)\|(.+)$/i);
      if (m) {
        const taskId = Number(m[1]);
        const status = normalizeTaskStatus(m[2]);

        const res = await this.tools.route('update_status', { taskId, status }, {
          requesterChatId: String(q.from.id),
          requesterEmployee: auth.employee
        });

        if (res?.ok) {
          try {
            if (q.message?.chat?.id && q.message?.message_id) {
              await this.bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: q.message.chat.id,
                message_id: q.message.message_id
              });
            }
          } catch {}
          await this.bot.answerCallbackQuery(q.id, { text: `–°—Ç–∞—Ç—É—Å: ${status}` });
        } else {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏
          if (res?.requires && status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') {
            let errorMessage = `‚ö†Ô∏è ${res.error}\n\n`;
            
            if (res.requires.includes('complete_dod')) {
              errorMessage += `üìã **–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å DoD —á–µ–∫-–ª–∏—Å—Ç—ã:**\n`;
              errorMessage += `‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —á–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏\n`;
              errorMessage += `‚Ä¢ –û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã\n\n`;
            }
            
            if (res.requires.includes('provide_report')) {
              errorMessage += `üìù **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç:**\n`;
              errorMessage += `‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É\n`;
              errorMessage += `‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (—Ñ–∞–π–ª—ã, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã)\n`;
              errorMessage += `‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã\n\n`;
            }
            
            errorMessage += `üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
            errorMessage += `‚Ä¢ "—Å–æ–∑–¥–∞—Ç—å DoD —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}"\n`;
            errorMessage += `‚Ä¢ "—Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}"\n`;
            errorMessage += `‚Ä¢ "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ ${taskId}"`;
            
            await this.bot.answerCallbackQuery(q.id, { text: errorMessage, show_alert: true });
          } else {
            await this.bot.answerCallbackQuery(q.id, { text: `‚ö†Ô∏è ${res?.error || '–û—à–∏–±–∫–∞'}`, show_alert: true });
          }
        }
        return;
      }

      // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫ (–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ç.–¥.)

      await this.bot.answerCallbackQuery(q.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    } catch (e) {
      await this.bot.answerCallbackQuery(q.id, { text: `‚ö†Ô∏è ${e?.message || e}`, show_alert: true });
    }
  }

  async getActiveTask(chatId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      const { ConversationLog } = await import('../services/ConversationLog.js');
      const conversationLog = new ConversationLog();
      
      // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      const recentMessages = await conversationLog.getConversationByKeywords(chatId, ['–∑–∞–¥–∞—á–∞', 'task'], 10);
      
      for (const message of recentMessages) {
        // –ò—â–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∑–∞–¥–∞—á–∞ 71", "task 71")
        const taskIdMatch = message.content.match(/(?:–∑–∞–¥–∞—á–∞|task)\s*(\d+)/i);
        if (taskIdMatch) {
          const taskId = Number(taskIdMatch[1]);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
          const taskResult = await this.tools.route('get_task', { taskId }, {
            requesterChatId: String(chatId),
            requesterEmployee: null
          });
          
          if (taskResult?.ok && taskResult.task && taskResult.task.status !== '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') {
            return taskResult.task;
          }
        }
      }
      
      return null;
    } catch (error) {
      log.warn('[BotApp] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏:', error.message);
      return null;
    }
  }

  async findTaskByName(taskName) {
    try {
      // –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ API
      const result = await this.tools.route('list_tasks', {}, {
        requesterChatId: 'system',
        requesterEmployee: null
      });
      
      if (result?.ok && result.tasks) {
        // –ò—â–µ–º –∑–∞–¥–∞—á—É —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        const normalizedSearchName = taskName.toLowerCase().trim();
        
        for (const task of result.tasks) {
          const normalizedTaskName = task.task.toLowerCase().trim();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–∏–µ
          if (normalizedTaskName === normalizedSearchName || 
              normalizedTaskName.includes(normalizedSearchName) ||
              normalizedSearchName.includes(normalizedTaskName)) {
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
            return task;
          }
        }
      }
      
      return null;
    } catch (error) {
      log.warn('[BotApp] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', error.message);
      return null;
    }
  }

  async onCallbackQuery(q) {
    try {
      const auth = await this.acl.authorize(q.from?.id);
      if (!auth.allowed) {
        await this.bot.answerCallbackQuery(q.id, { text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', show_alert: true });
        return;
      }

      const data = q.data || '';

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
      if (data === 'new_task') {
        const result = '‚ûï –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/create_task [–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏] [–æ–ø–∏—Å–∞–Ω–∏–µ] [–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç] [–¥–µ–¥–ª–∞–π–Ω]\n\n–ü—Ä–∏–º–µ—Ä:\n/create_task –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å API –í—ã—Å–æ–∫–∏–π 2024-01-15';
        await this.bot.answerCallbackQuery(q.id, { text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
        await this.bot.sendMessage(q.from.id, result);
        return;
      }
      
      if (data === 'update_status') {
        const result = 'üîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/update_task [ID_–∑–∞–¥–∞—á–∏] [–Ω–æ–≤—ã–π_—Å—Ç–∞—Ç—É—Å]\n\n–ü—Ä–∏–º–µ—Ä:\n/update_task 123 –í —Ä–∞–±–æ—Ç–µ';
        await this.bot.answerCallbackQuery(q.id, { text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
        await this.bot.sendMessage(q.from.id, result);
        return;
      }
      
      if (data === 'employees') {
        try {
          const empResult = await this.tools.route('list_employees', {}, {
            requesterChatId: String(q.from.id),
            requesterEmployee: auth.employee
          });
          if (empResult.ok && empResult.employees && empResult.employees.length > 0) {
            let result = 'üë• –°–ü–ò–°–û–ö –°–û–¢–†–£–î–ù–ò–ö–û–í:\n\n';
            for (const emp of empResult.employees) {
              result += `üë§ ${emp.name}\n`;
              result += `üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${emp.job || emp.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
              result += `üì± Chat ID: ${emp.chat_id || emp.tg_user_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
              result += `üîë –†–æ–ª—å: ${emp.user_role || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
              result += `\n${'‚îÄ'.repeat(30)}\n\n`;
            }
            await this.bot.answerCallbackQuery(q.id, { text: '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
            await this.bot.sendMessage(q.from.id, result);
          } else {
            await this.bot.answerCallbackQuery(q.id, { text: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤' });
          }
        } catch (error) {
          await this.bot.answerCallbackQuery(q.id, { text: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤' });
        }
        return;
      }
      
      if (data === 'report') {
        try {
          const reportResult = await this.tools.route('get_report', {}, {
            requesterChatId: String(q.from.id),
            requesterEmployee: auth.employee
          });
          if (reportResult.ok) {
            const result = reportResult.report || 'üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤';
            await this.bot.answerCallbackQuery(q.id, { text: '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
            await this.bot.sendMessage(q.from.id, result);
          } else {
            await this.bot.answerCallbackQuery(q.id, { text: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç' });
          }
        } catch (error) {
          await this.bot.answerCallbackQuery(q.id, { text: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞' });
        }
        return;
      }
      
      if (data === 'explanations') {
        try {
          if (auth.employee.user_role === 'manager') {
            const all = await this.tools.route('list_all_explanations', { limit: 10 }, {
              requesterChatId: String(q.from.id),
              requesterEmployee: auth.employee
            });
            if (all.ok) {
              let result = 'üóÇ –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ï (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)\n\n';
              const sections = [
                { title: '‚è≥ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', list: all.awaitingUser || [] },
                { title: 'üìù –û–∂–∏–¥–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è', list: all.forReview || [] },
                { title: '‚úÖ –†–µ—à—ë–Ω–Ω—ã–µ', list: all.resolved || [] }
              ];
              for (const s of sections) {
                result += `${s.title}:\n`;
                if (s.list.length === 0) {
                  result += '  ‚Äî\n\n';
                  continue;
                }
                for (const exp of s.list) {
                  result += `  ‚Ä¢ ID:${exp.id} | Task:${exp.task_id} | ${exp.employee_name || '‚Äî'} | ${exp.status}` + (exp.responded_at ? ` | –æ—Ç–≤–µ—Ç: ${new Date(exp.responded_at).toLocaleString('ru-RU')}` : '') + '\n';
                }
                result += '\n';
              }
              await this.bot.answerCallbackQuery(q.id, { text: '–°–≤–æ–¥–∫–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö' });
              await this.bot.sendMessage(q.from.id, result);
            } else {
              await this.bot.answerCallbackQuery(q.id, { text: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö' });
            }
          } else {
            const myExp = await this.tools.route('list_my_explanations', { limit: 10 }, {
              requesterChatId: String(q.from.id),
              requesterEmployee: auth.employee
            });
            if (myExp.ok && Array.isArray(myExp.explanations) && myExp.explanations.length > 0) {
              let result = 'üóÇ –ú–û–ò –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ï:\n\n';
              for (const exp of myExp.explanations) {
                result += `üÜî ID: ${exp.id}\n`;
                result += `üìã –ó–∞–¥–∞—á–∞: ${exp.task || '‚Äî'}\n`;
                result += `‚è≥ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${exp.requested_at ? new Date(exp.requested_at).toLocaleString('ru-RU') : '‚Äî'}\n`;
                result += `üìù –¢–µ–∫—Å—Ç: ${exp.explanation_text || '‚Äî'}\n`;
                result += `üìÖ –û—Ç–≤–µ—Ç: ${exp.responded_at ? new Date(exp.responded_at).toLocaleString('ru-RU') : '‚Äî'}\n`;
                result += `‚è∞ –°—Ç–∞—Ç—É—Å: ${exp.status}\n`;
                result += `\n${'‚îÄ'.repeat(40)}\n\n`;
              }
              await this.bot.answerCallbackQuery(q.id, { text: '–í–∞—à–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' });
              await this.bot.sendMessage(q.from.id, result);
            } else {
              await this.bot.answerCallbackQuery(q.id, { text: '–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö' });
            }
          }
        } catch (error) {
          await this.bot.answerCallbackQuery(q.id, { text: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö' });
        }
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
      if (data.startsWith('leadership_')) {
        if (auth.employee.user_role !== 'manager') {
          await this.bot.answerCallbackQuery(q.id, { text: '–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞', show_alert: true });
          return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º: leadership_explanations_report|<months>
        if (data.startsWith('leadership_explanations_report|')) {
          const parts = data.split('|');
          const months = Math.max(1, parseInt(parts[1] || '1', 10) || 1);
          try {
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ requested_at
            const now = new Date();
            const start = new Date(now.getFullYear(), now.getMonth() - (months - 1), 1, 0, 0, 0);

            const rows = await query(`
              SELECT 
                e.employee_id,
                e.name AS employee_name,
                e.job AS employee_job,
                COUNT(ee.id) AS requested,
                SUM(CASE WHEN ee.responded_at IS NOT NULL THEN 1 ELSE 0 END) AS provided
              FROM employees e
              LEFT JOIN employee_explanations ee 
                ON ee.employee_id = e.employee_id 
               AND ee.requested_at >= ?
              GROUP BY e.employee_id, e.name, e.job
            `, [start]);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω–æ)
            const enriched = rows.map(r => ({
              employee_id: r.employee_id,
              name: r.employee_name || '‚Äî',
              job: r.employee_job || '‚Äî',
              requested: Number(r.requested || 0),
              provided: Number(r.provided || 0),
              missing: Math.max(0, Number(r.requested || 0) - Number(r.provided || 0))
            })).sort((a, b) => b.missing - a.missing || b.requested - a.requested || a.name.localeCompare(b.name));

            const header = `üìù –û—Ç—á–µ—Ç –ø–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º (–∑–∞ ${months === 1 ? '—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü' : months + ' –º–µ—Å.'})`;
            let text = `${header}\n\n`;
            const top = enriched.slice(0, 15);
            if (top.length === 0) {
              text += '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.';
            } else {
              for (const r of top) {
                text += `‚Ä¢ ${r.name}: –∑–∞–ø—Ä–æ—à–µ–Ω–æ=${r.requested}, –Ω–∞–ø–∏—Å–∞–Ω–æ=${r.provided}, –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω–æ=${r.missing}\n`;
              }
              if (enriched.length > top.length) {
                text += `\n‚Ä¶ –∏ –µ—â–µ ${enriched.length - top.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`;
              }
            }

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞
            const keyboard = {
              inline_keyboard: [
                [
                  { text: '1 –º–µ—Å', callback_data: 'leadership_explanations_report|1' },
                  { text: '3 –º–µ—Å', callback_data: 'leadership_explanations_report|3' },
                  { text: '6 –º–µ—Å', callback_data: 'leadership_explanations_report|6' }
                ],
                [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'leadership_refresh' } ]
              ]
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try {
              await this.bot.editMessageText(text, {
                chat_id: q.message.chat.id,
                message_id: q.message.message_id,
                reply_markup: keyboard
              });
            } catch {
              await this.bot.sendMessage(q.message.chat.id, text, { reply_markup: keyboard });
            }

            await this.bot.answerCallbackQuery(q.id, { text: '–û—Ç—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω' });
          } catch (e) {
            log.error('[LEADERSHIP_EXPLANATIONS_REPORT]', e?.message || e);
            await this.bot.answerCallbackQuery(q.id, { text: '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞' });
          }
          return;
        }

        // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –ª–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
        if (data === 'leadership_penalty_candidates') {
          try {
            const days = 30;
            const since = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
            const rows = await query(`
              SELECT 
                e.employee_id,
                e.name AS employee_name,
                e.job AS employee_job,
                COUNT(ee.id) AS explanation_count
              FROM employees e
              LEFT JOIN employee_explanations ee 
                ON ee.employee_id = e.employee_id 
               AND ee.requested_at >= ?
              GROUP BY e.employee_id, e.name, e.job
              HAVING explanation_count >= 3
              ORDER BY explanation_count DESC, e.name ASC
            `, [since]);

            if (!rows || rows.length === 0) {
              await this.bot.sendMessage(q.message.chat.id, '‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ª–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            } else {
              let text = 'üö´ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –ª–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ (–∑–∞ 30 –¥–Ω–µ–π, ‚â•3 –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö):\n\n';
              const keyboard = { inline_keyboard: [] };
              for (const r of rows.slice(0, 10)) {
                text += `‚Ä¢ ${r.employee_name} (${r.employee_job || '‚Äî'}) ‚Äî –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${r.explanation_count}\n`;
                keyboard.inline_keyboard.push([
                  { text: `–õ–∏—à–∏—Ç—å (${r.employee_name})`, callback_data: `leadership_penalty_prompt|${r.employee_id}` },
                  { text: '–ü–æ–º–∏–ª–æ–≤–∞—Ç—å', callback_data: `leadership_penalty_pardon|${r.employee_id}` },
                  { text: '–î–∞—Ç—å —à–∞–Ω—Å', callback_data: `leadership_penalty_warn|${r.employee_id}` }
                ]);
              }
              if (rows.length > 10) {
                text += `\n‚Ä¶ –∏ –µ—â–µ ${rows.length - 10} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤`;
              }
              keyboard.inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'leadership_refresh' }]);
              await this.bot.sendMessage(q.message.chat.id, text, { reply_markup: keyboard });
            }
            await this.bot.answerCallbackQuery(q.id, { text: '–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤' });
          } catch (e) {
            log.error('[LEADERSHIP_PENALTY_CANDIDATES]', e?.message || e);
            await this.bot.answerCallbackQuery(q.id, { text: '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞' });
          }
          return;
        }

        // –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É: –ª–∏—à–∏—Ç—å/–ø–æ–º–∏–ª–æ–≤–∞—Ç—å/–¥–∞—Ç—å —à–∞–Ω—Å
        if (data.startsWith('leadership_penalty_prompt|')) {
          const empId = Number(data.split('|')[1]);
          // –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Å—É–º–º
          const kb = {
            inline_keyboard: [
              [
                { text: '500', callback_data: `leadership_penalty_apply|${empId}|500` },
                { text: '1000', callback_data: `leadership_penalty_apply|${empId}|1000` },
                { text: '1500', callback_data: `leadership_penalty_apply|${empId}|1500` }
              ],
              [ { text: '–û—Ç–º–µ–Ω–∞', callback_data: 'leadership_refresh' } ]
            ]
          };
          await this.bot.sendMessage(q.message.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ª–∏—à–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID ${empId}:`, { reply_markup: kb });
          await this.bot.answerCallbackQuery(q.id, { text: '–í—ã–±–æ—Ä —Å—É–º–º—ã' });
          return;
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏—à–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø–æ –∫–Ω–æ–ø–∫–µ (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
        if (data.startsWith('leadership_penalty_apply|')) {
          const [, empIdStr, amountStr] = data.split('|');
          const employeeId = Number(empIdStr);
          const bonusAmount = Number(amountStr);
          const comment = '–†–µ—à–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å';
          try {
            const employees = await this.api.get('employees');
            const employee = employees.find(emp => emp.employee_id === employeeId);

            if (!employee) {
              await this.bot.answerCallbackQuery(q.id, { text: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: true });
              return;
            }

            log.info(`[BotApp] –õ–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ (–∫–Ω–æ–ø–∫–∞): ${employee.name}, —Å—É–º–º–∞: ${bonusAmount}, –ø—Ä–∏—á–∏–Ω–∞: ${comment}`);

            await this.bot.sendMessage(q.message.chat.id,
              `üí∞ –ë–û–ù–£–° –õ–ò–®–ï–ù\n\n` +
              `–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${employee.name}\n` +
              `–°—É–º–º–∞: ${bonusAmount} —Å–æ–º\n` +
              `–ü—Ä–∏—á–∏–Ω–∞: ${comment}\n` +
              `–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`
            );

            try {
              if (employee.chat_id) {
                await this.bot.sendMessage(
                  toNumericIfPossible(employee.chat_id),
                  `üí∞ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –õ–ò–®–ï–ù–ò–ò –ë–û–ù–£–°–ê\n\n` +
                  `–í–∞–º –ª–∏—à–µ–Ω –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ ${bonusAmount} —Å–æ–º\n` +
                  `–ü—Ä–∏—á–∏–Ω–∞: ${comment}\n` +
                  `–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`
                );
              } else {
                await this.bot.sendMessage(q.message.chat.id, '‚ö†Ô∏è –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω chat_id ‚Äî –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
              }
            } catch (notifyErr) {
              log.warn(`[BotApp] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employee.name}:`, notifyErr?.message || notifyErr);
              await this.bot.sendMessage(q.message.chat.id, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω).');
            }

            await this.bot.answerCallbackQuery(q.id, { text: '–ì–æ—Ç–æ–≤–æ' });
          } catch (e) {
            log.error('[BotApp] –û—à–∏–±–∫–∞ –ª–∏—à–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ (–∫–Ω–æ–ø–∫–∞):', e?.message || e);
            await this.bot.answerCallbackQuery(q.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è', show_alert: true });
          }
          return;
        }
        if (data.startsWith('leadership_penalty_pardon|')) {
      const empId = Number(data.split('|')[1]);
      await this.bot.sendMessage(q.message.chat.id, `‚úÖ –ü–æ–º–∏–ª–æ–≤–∞–Ω–∏–µ: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID ${empId}.`);
      try {
        const employees = await this.api.get('employees');
        const employee = employees.find(emp => emp.employee_id === empId);
        if (employee?.chat_id) {
          await this.bot.sendMessage(
            toNumericIfPossible(employee.chat_id),
            '‚úÖ –ü–æ —Ä–µ—à–µ–Ω–∏—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ª–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É.'
          );
        }
      } catch {}
          await this.bot.answerCallbackQuery(q.id, { text: '–ü–æ–º–∏–ª–æ–≤–∞–Ω' });
          return;
        }
        if (data.startsWith('leadership_penalty_warn|')) {
      const empId = Number(data.split('|')[1]);
      await this.bot.sendMessage(q.message.chat.id, `‚ö†Ô∏è –î–∞—Ç—å —à–∞–Ω—Å: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID ${empId}. –ö–æ–Ω—Ç—Ä–æ–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ.`);
      try {
        const employees = await this.api.get('employees');
        const employee = employees.find(emp => emp.employee_id === empId);
        if (employee?.chat_id) {
          await this.bot.sendMessage(
            toNumericIfPossible(employee.chat_id),
            '‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä –¥–∞–ª —à–∞–Ω—Å –∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ª—É—á—à–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏. –ö–æ–Ω—Ç—Ä–æ–ª—å ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ.'
          );
        }
      } catch {}
          await this.bot.answerCallbackQuery(q.id, { text: '–®–∞–Ω—Å –¥–∞–Ω' });
          return;
        }

        try {
          const { DecisionEngine } = await import('../services/DecisionEngine.js');
          const { LeadershipCommands } = await import('../services/LeadershipCommands.js');
          
          const decisionEngine = new DecisionEngine(this.api, this.employees);
          const leadership = new LeadershipCommands(decisionEngine, this.tools);
          
          let result = '';
          
          switch (data) {
            case 'leadership_analyze_team':
              result = await leadership.analyzeTeam();
              break;
            case 'leadership_strategic_report':
              result = await leadership.generateStrategicReport();
              break;
            case 'leadership_suggest_improvements':
              result = await leadership.suggestImprovements();
              break;
            case 'leadership_auto_decide':
              result = await leadership.autoDecideOnTasks();
              break;
            case 'leadership_explanations':
            case 'explanations': {
              // –ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ –ø–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
              const text = 'üìù –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞:';
              const keyboard = {
                inline_keyboard: [
                  [
                    { text: '1 –º–µ—Å', callback_data: 'leadership_explanations_report|1' },
                    { text: '3 –º–µ—Å', callback_data: 'leadership_explanations_report|3' },
                    { text: '6 –º–µ—Å', callback_data: 'leadership_explanations_report|6' }
                  ],
                  [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'leadership_refresh' } ]
                ]
              };
              await this.bot.sendMessage(q.message.chat.id, text, { reply_markup: keyboard });
              result = '';
              break;
            }
            case 'leadership_all_tasks':
              const tasksResult = await this.tools.route('list_tasks', {}, {
                requesterChatId: String(q.from.id),
                requesterEmployee: auth.employee
              });
              if (Array.isArray(tasksResult)) {
                result = `üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasksResult.length}\n\n`;
                for (const task of tasksResult.slice(0, 10)) {
                  result += `#${task.task_id} - ${task.task} (${task.status})\n`;
                }
                if (tasksResult.length > 10) {
                  result += `\n... –∏ –µ—â–µ ${tasksResult.length - 10} –∑–∞–¥–∞—á`;
                }
              } else {
                result = '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á';
              }
              break;
            case 'leadership_refresh':
              // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
              const keyboard = {
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: 'üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã', callback_data: 'leadership_analyze_team' },
                      { text: 'üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç', callback_data: 'leadership_strategic_report' }
                    ],
                    [
                      { text: 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é', callback_data: 'leadership_suggest_improvements' },
                      { text: 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è', callback_data: 'leadership_auto_decide' }
                    ],
                    [
                      { text: 'üìù –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ', callback_data: 'leadership_explanations' },
                      { text: 'üö´ –õ–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤', callback_data: 'leadership_penalty_candidates' }
                    ],
                    [
                      { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'leadership_all_tasks' }
                    ],
                    [
                      { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'leadership_refresh' },
                      { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'leadership_close' }
                    ]
                  ]
                }
              };
              
              await this.bot.editMessageText(
                'üëë **–ü–ê–ù–ï–õ–¨ –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π:',
                {
                  chat_id: q.message.chat.id,
                  message_id: q.message.message_id,
                  parse_mode: 'Markdown',
                  ...keyboard
                }
              );
              await this.bot.answerCallbackQuery(q.id, { text: '–ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
              return;
            case 'leadership_close':
              await this.bot.deleteMessage(q.message.chat.id, q.message.message_id);
              await this.bot.answerCallbackQuery(q.id, { text: '–ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞' });
              return;
            case 'ai_assistant':
              await this.bot.sendMessage(q.message.chat.id, 
                'üîç **–ò–ò-–ü–û–ú–û–©–ù–ò–ö –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø**\n\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:\n\n' +
                '‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è\n' +
                '‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö\n' +
                '‚Ä¢ –î–∞–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n' +
                '‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–æ–π\n\n' +
                '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É!',
                { parse_mode: 'Markdown' }
              );
              await this.bot.answerCallbackQuery(q.id, { text: '–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' });
              return;
            default:
              await this.bot.answerCallbackQuery(q.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' });
              return;
          }
          
          if (result) {
            await this.bot.sendMessage(q.message.chat.id, result);
            await this.bot.answerCallbackQuery(q.id, { text: '–ì–æ—Ç–æ–≤–æ' });
          }
        } catch (error) {
          log.error('[BotApp] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞:', error.message);
          await this.bot.answerCallbackQuery(q.id, { text: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã' });
        }
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
      if (q.data.startsWith('accept_exp_') || q.data.startsWith('reject_exp_') || q.data.startsWith('penalty_exp_')) {
        const action = q.data.split('_')[0]; // accept, reject, penalty
        const expId = q.data.split('_')[2]; // ID –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π
        
        let result = '';
        if (action === 'accept') {
          result = `‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è ${expId} –ø—Ä–∏–Ω—è—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/accept ${expId} [–≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]`;
        } else if (action === 'reject') {
          result = `‚ùå –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è ${expId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/reject ${expId} [–≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]`;
        } else if (action === 'penalty') {
          result = `üí∞ –î–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ –ø–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π ${expId} –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/penalty ${expId} [—Å—É–º–º–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]`;
        }
        
        await this.bot.sendMessage(q.message.chat.id, result);
        await this.bot.answerCallbackQuery(q.id, { text: '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' });
        return;
      }

      // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query...
      // (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

    } catch (error) {
      log.error('[BotApp] –û—à–∏–±–∫–∞ –≤ onCallbackQuery:', error.message);
      await this.bot.answerCallbackQuery(q.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  }

  async onMessage(msg) {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç, –Ω–µ –≥–æ–ª–æ—Å –∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (!msg.text && !msg.voice && !msg.document) return;
    if (msg.text && msg.text.startsWith('/')) return;

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const auth = await this.acl.authorize(msg.from?.id);
    if (!auth.allowed) return;

    const chatId = msg.chat.id;

    if (msg.text && !msg.text.startsWith('/')) {
      await this.bot.sendMessage(chatId, '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...');
      const aiReply = await this.assistant.ask(msg.text, { chatId: String(chatId), employee: auth.employee });

      await this.bot.sendMessage(chatId, aiReply);

      try {
        const buf = await this.openai.speak(aiReply);
        const out = await this.files.saveBuffer(buf, 'ogg');
        await this.bot.sendVoice(
          chatId,
          fs.createReadStream(out),
          { filename: 'voice.ogg' }
        );
      } catch {}
      return;
    }

    if (msg.voice) {
      try {
        await this.bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å‚Ä¶');
        const localPath = await this.files.downloadTelegramFile(this.bot, msg.voice.file_id, 'ogg');
        const text = await this.openai.transcribe(localPath);
        await this.bot.sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´${text}¬ª`);

        await this.bot.sendMessage(chatId, 'üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑‚Ä¶');
        const aiReply = await this.assistant.ask(text, { chatId: String(chatId), employee: auth.employee });
        await this.bot.sendMessage(chatId, aiReply);

        try {
          const buf = await this.openai.speak(aiReply);
          const out = await this.files.saveBuffer(buf, 'ogg');
          await this.bot.sendVoice(
            chatId,
            fs.createReadStream(out),
            { filename: 'voice.ogg' }
          );
        } catch {}
      } catch (e) {
        log.error('[VOICE ERROR]', e?.message || e);
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      }
    }

    if (msg.document) {
      try {
        await this.bot.sendMessage(chatId, 'üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const fileName = msg.document.file_name || 'document';
        const fileExt = fileName.split('.').pop()?.toLowerCase() || 'txt';
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const localPath = await this.files.downloadTelegramFile(this.bot, msg.document.file_id, fileExt);
        
        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (['txt', 'md', 'js', 'py', 'java', 'cpp', 'c', 'h', 'json', 'xml', 'html', 'css'].includes(fileExt)) {
          const content = fs.readFileSync(localPath, 'utf8');
          await this.bot.sendMessage(chatId, `üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ¬´${fileName}¬ª:\n\n\`\`\`\n${content.substring(0, 3000)}${content.length > 3000 ? '\n... (—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω)' : ''}\n\`\`\``);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ AI
          await this.bot.sendMessage(chatId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞...');
          const aiReply = await this.assistant.ask(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${fileName}: ${content.substring(0, 2000)}`, { chatId: String(chatId), employee: auth.employee });
          await this.bot.sendMessage(chatId, aiReply);
        } else {
          await this.bot.sendMessage(chatId, `üìÅ –§–∞–π–ª ¬´${fileName}¬ª –ø–æ–ª—É—á–µ–Ω (${fileExt.toUpperCase()}). –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.`);
        }
        
                 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ –≤ –ë–î
         try {
           const fileStats = fs.statSync(localPath);
           
           // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
           let taskId = null;
           let foundTask = null;
           
           // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
           const activeTask = await this.getActiveTask(chatId);
           if (activeTask) {
             taskId = activeTask.id;
             foundTask = activeTask;
             await this.bot.sendMessage(chatId, `üìé –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞—á–µ "${activeTask.task}" (ID: ${taskId})`);
           } else {
             // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
             if (['txt', 'md', 'js', 'py', 'java', 'cpp', 'c', 'h', 'json', 'xml', 'html', 'css'].includes(fileExt)) {
               const content = fs.readFileSync(localPath, 'utf8');
               
                               // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞
                const taskNameMatch = content.match(/(?:–∑–∞–¥–∞—á–∞|task)[:\s]*["']?([^"\n\r]+)["']?/i);
                if (taskNameMatch) {
                  const taskName = taskNameMatch[1].trim();
                  foundTask = await this.findTaskByName(taskName);
                  
                  if (foundTask) {
                    taskId = foundTask.id;
                    await this.bot.sendMessage(chatId, `üìé –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞—á–µ "${foundTask.task}" (ID: ${taskId})`);
                  }
                }
                
                // –¢–∞–∫–∂–µ –∏—â–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
                const taskIdMatch = content.match(/(?:–∑–∞–¥–∞—á–∞\s*id|id\s*–∑–∞–¥–∞—á–∏|task\s*id|üéØ\s*–∑–∞–¥–∞—á–∞\s*id|id)[:\s]*(\d+)/i);
                log.info(`[BotApp] –ü–æ–∏—Å–∫ ID –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª–µ ${fileName}:`, {
                  contentLength: content.length,
                  taskIdMatch: taskIdMatch,
                  firstLines: content.substring(0, 200)
                });
                
                // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ID –≤ —Ñ–∞–π–ª–µ, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–µ–º—É
                if (taskIdMatch && !foundTask) {
                  const taskIdFromFile = Number(taskIdMatch[1]);
                  log.info(`[BotApp] –ù–∞–π–¥–µ–Ω ID –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª–µ: ${taskIdFromFile}`);
                  
                  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É ID –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞
                  taskId = taskIdFromFile;
                  foundTask = { id: taskIdFromFile, task: `–ó–∞–¥–∞—á–∞ ID: ${taskIdFromFile}` };
                  await this.bot.sendMessage(chatId, `üìé –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞—á–µ ID: ${taskIdFromFile}`);
                }
             }
             
             if (!foundTask) {
               await this.bot.sendMessage(chatId, `üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∑–∞–¥–∞—á–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: "–ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª ${fileName} –∫ –∑–∞–¥–∞—á–µ [ID]"`);
             }
           }
           
           await this.tools.route('save_artifact', {
             taskId: taskId,
             fileName: fileName,
             filePath: localPath,
             fileSize: fileStats.size,
             artifactType: 'documentation'
           }, {
             requesterChatId: String(chatId),
             requesterEmployee: auth.employee
           });
           
           // –û—Ç–ª–∞–¥–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
           await this.bot.sendMessage(chatId, `üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å taskId: ${taskId}`);
         } catch (e) {
           log.warn('[FILE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:', e?.message);
         }
        
      } catch (e) {
        log.error('[FILE ERROR]', e?.message || e);
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.');
      }
    }
  }
}
