// import fs from 'fs';
// import TelegramBot from 'node-telegram-bot-api';
// import { ENV } from '../config/env.js';
// import { log } from '../utils/logger.js';
// import { FileStorage } from '../services/FileStorage.js';
// import { OpenAIService } from '../services/OpenAIService.js';
// import { AssistantService } from '../services/AssistantService.js';
// import { EmployeesService } from '../services/EmployeesService.js';
// import { Notifier } from '../services/Notifier.js';
// import { ToolRouter } from '../services/ToolRouter.js';
// import { TelegramUI } from './TelegramUI.js';
// import { AccessControlService } from '../services/AccessControlService.js';
// import { ApiClient } from '../services/ApiClient.js';

// export class BotApp {
// 	constructor() {
// 		this.bot = new TelegramBot(ENV.TELEGRAM_TOKEN, { polling: true });

// 		const api = new ApiClient();
// 		this.files = new FileStorage();
// 		this.openai = new OpenAIService();
// 		this.assistant = new AssistantService({ bot: this.bot});
// 		this.employees = new EmployeesService(api);
// 		this.notifier = new Notifier(this.bot);
// 		this.tools = new ToolRouter({ api, employees: this.employees, notifier: this.notifier });
// 		this.acl = new AccessControlService({ employees: this.employees });
// 		this.uiState = new Map();
// 		this.pendingAssign = new Map();

// 		this.bindHandlers();
// 		log.info('BotApp initialized');
// 	}

// 	bindHandlers() {
// 		this.bot.onText(/^(\/start|\/menu)$/, async (msg) => {
// 			const auth = await this.acl.authorize(msg.from?.id);
// 			if (!auth.allowed) {
// 				console.log('not auth', msg.from?.id);
// 				return;
// 			}
// 			await this.bot.sendMessage(
// 				msg.chat.id,
// 				'üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è —Å–ø—Ä–æ—à—É –ò–ò-–∞–≥–µ–Ω—Ç–∞ –∏/–∏–ª–∏ –≤—ã–ø–æ–ª–Ω—é –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏.\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
// 				TelegramUI.mainMenuInline()
// 			);
// 		});

// 		this.bot.on('callback_query', async (q) => this.onCallbackQuery(q));
// 		this.bot.on('message', async (msg) => this.onMessage(msg));
// 	}

// 	async start() { }
// 	async stop() { }

// 	async onCallbackQuery(q) {
// 		const auth = await this.acl.authorize(q.from?.id);
// 		if (!auth.allowed) return;
// 	}

// 	async onMessage(msg) {
// 		console.log('[TELEGRAM][GET][MESSAGE]', msg);

// 		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –≥–æ–ª–æ—Å –æ—Ç–∫–ª–æ–Ω—è–µ–º
// 		if (!msg.text && !msg.voice) return;
// 		if (msg.text && msg.text.startsWith('/')) return;

// 		// –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
// 		const auth = await this.acl.authorize(msg.from?.id);

// 		console.log('auth', auth, msg.from?.id);
// 		if (!auth.allowed) return;

// 		const chatId = msg.chat.id;
		
// 		if (msg.text && !msg.text.startsWith('/')) {
// 			await this.bot.sendMessage(chatId, '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...');
// 			const aiReply = await this.assistant.ask(msg.text, { chatId, employee: auth.employee });

// 			console.log('===============================================================');
// 			console.log('[TELEGRAM][REPLY]', aiReply);
// 			console.log('===============================================================');
// 			await this.bot.sendMessage(chatId, aiReply);

// 			try {
// 				const buf = await this.openai.speak(aiReply);
// 				const out = await this.files.saveBuffer(buf, 'ogg');
// 				await this.bot.sendVoice(chatId, { source: fs.createReadStream(out), filename: 'voice.ogg', contentType: 'audio/ogg' });
// 			} catch { }

// 			return;
// 		}

// 		if (msg.voice) {
// 			try {
// 				await this.bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å‚Ä¶');
// 				const localPath = await this.files.downloadTelegramFile(this.bot, msg.voice.file_id, 'ogg');
// 				const text = await this.openai.transcribe(localPath);
// 				await this.bot.sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´${text}¬ª`);

// 				await this.bot.sendMessage(chatId, 'üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑‚Ä¶');
// 				const aiReply = await this.assistant.ask(text, { chatId, employee: auth.employee });
// 				await this.bot.sendMessage(chatId, aiReply);

// 				try {
// 					const buf = await this.openai.speak(aiReply);
// 					const out = await this.files.saveBuffer(buf, 'ogg');
// 					// console.log("jjj", out, "pp", buf);
// 					// // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
// 					// await this.bot.sendVoice(chatId, {
// 					// 	source: fs.createReadStream(out),
// 					// 	filename: 'voice.ogg',
// 					// 	contentType: 'audio/ogg'
// 					// });
// 					const voicePath = out;
// 					// –í–∞–∂–Ω–æ: sendVoice —Ç—Ä–µ–±—É–µ—Ç OGG/Opus. –ï—Å–ª–∏ —É —Ç–µ–±—è mp3 ‚Äî —Å–º. –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–∏–∂–µ.

// 					await this.bot.sendVoice(
// 						chatId,
// 						fs.createReadStream(voicePath),       // <‚Äî Stream/Buffer/–ø—É—Ç—å
// 						// { caption: '–û—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º' },         // options
// 						{ filename: 'voice.ogg' }             // fileOptions
// 					);
// 				} catch { }
// 			} catch (e) {
// 				log.error('[VOICE ERROR]', e?.message || e);
// 				await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
// 			}
// 		}
// 	}
// }

// src/bot/BotApp.js
import fs from 'fs';
import TelegramBot from 'node-telegram-bot-api';
import { ENV } from '../config/env.js';
import { log } from '../utils/logger.js';
import { FileStorage } from '../services/FileStorage.js';
import { OpenAIService } from '../services/OpenAIService.js';
import { AssistantService } from '../services/AssistantService.js';
import { EmployeesService } from '../services/EmployeesService.js';
import { Notifier } from '../services/Notifier.js';
import { ToolRouter } from '../services/ToolRouter.js';
import { TelegramUI } from './TelegramUI.js';
import { AccessControlService } from '../services/AccessControlService.js';
import { ApiClient } from '../services/ApiClient.js';
import { ExplanatoryService } from '../services/ExplanatoryService.js';
import { startDirectorHourlyReportScheduler,startAssigneeReminderScheduler5min } from '../services/ReportScheduler.js';

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫ –ë–î
function normalizeTaskStatus(s) {
  const x = String(s || '').trim().toLowerCase();
  if (x === '–≤ —Ä–∞–±–æ—Ç–µ' || x === 'doing' || x === 'progress') return '–í —Ä–∞–±–æ—Ç–µ';
  if (x === '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' || x === 'review') return '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ';
  if (x === '–∑–∞–≤–µ—Ä—à–µ–Ω–∞' || x === '–≥–æ—Ç–æ–≤–æ' || x === '—Å–¥–µ–ª–∞–Ω–æ' || x === 'done' || x === 'complete') return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
  if (x === '–æ—Ç–ª–æ–∂–µ–Ω–∞' || x === 'later' || x === 'deferred') return '–û—Ç–ª–æ–∂–µ–Ω–∞';
  if (x === '–æ—Ç–º–µ–Ω–µ–Ω–∞' || x === 'cancel') return '–û—Ç–º–µ–Ω–µ–Ω–∞';
  if (x === '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è' || x === '–∂–¥—ë–º' || x === '–æ–∂–∏–¥–∞–Ω–∏–µ' || x === '–±–ª–æ–∫' || x === 'blocked') return '–í –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è';
  return '–í —Ä–∞–±–æ—Ç–µ';
}

export class BotApp {
  constructor() {
    this.bot = new TelegramBot(ENV.TELEGRAM_TOKEN, { polling: true });

    const api = new ApiClient();
    this.files = new FileStorage();
    this.openai = new OpenAIService();
    this.assistant = new AssistantService({ bot: this.bot }); // <-- —Ñ–∏–∫—Å
    this.employees = new EmployeesService(api);
    this.notifier = new Notifier(this.bot);
    this.explanatory = new ExplanatoryService();
    this.tools = new ToolRouter({ api, employees: this.employees, notifier: this.notifier });
    this.acl = new AccessControlService({ employees: this.employees });
    this.uiState = new Map();
    this.pendingAssign = new Map();

    this.bindHandlers();
    log.info('BotApp initialized');

	    // üïí –ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—É (Asia/Dushanbe)
    process.env.TZ = process.env.TZ || 'Asia/Dushanbe';
    startDirectorHourlyReportScheduler({ api: this.api, toolRouter: this.tools, notifier: this.notifier, explanatoryService: this.explanatory });
    startAssigneeReminderScheduler5min({ api: this.api, toolRouter: this.tools, notifier: this.notifier });
  }

  bindHandlers() {
    this.bot.onText(/^(\/start|\/menu)$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed) return;

      await this.bot.sendMessage(
        msg.chat.id,
        'üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è —Å–ø—Ä–æ—à—É –ò–ò-–∞–≥–µ–Ω—Ç–∞ –∏/–∏–ª–∏ –≤—ã–ø–æ–ª–Ω—é –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏.\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        TelegramUI.mainMenuInline()
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π
    this.bot.onText(/^\/explanation\s+(\d+)\s+(.+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed) return;

      const explanationId = Number(match[1]);
      const explanationText = match[2];

      try {
        const result = await this.tools.route('submit_explanation', {
          explanationId: explanationId,
          explanationText: explanationText
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok) {
          await this.bot.sendMessage(msg.chat.id, '‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É.');
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤)
    this.bot.onText(/^\/explanations$/, async (msg) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed) return;

      if (auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ.');
        return;
      }

      try {
        const result = await this.tools.route('list_pending_explanations', {
          limit: 10
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok && result.explanations.length > 0) {
          let message = 'üìù –û–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:\n\n';
          
          for (const exp of result.explanations) {
            message += `ID: ${exp.id}\n`;
            message += `–ó–∞–¥–∞—á–∞: ${exp.task}\n`;
            message += `–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${exp.employee_name}\n`;
            message += `–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: ${exp.explanation_text}\n`;
            message += `–î–∞—Ç–∞: ${new Date(exp.responded_at).toLocaleString('ru-RU')}\n`;
            message += `\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:\n`;
            message += `/accept ${exp.id} [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] - –ø—Ä–∏–Ω—è—Ç—å\n`;
            message += `/reject ${exp.id} [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å\n`;
            message += `/penalty ${exp.id} [—Å—É–º–º–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] - –Ω–∞–∫–∞–∑–∞—Ç—å\n\n`;
          }
          
          await this.bot.sendMessage(msg.chat.id, message);
        } else {
          await this.bot.sendMessage(msg.chat.id, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö.');
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π
    this.bot.onText(/^\/accept\s+(\d+)\s+(.+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        return;
      }

      const explanationId = Number(match[1]);
      const comment = match[2];

      try {
        const result = await this.tools.route('review_explanation', {
          explanationId: explanationId,
          decision: 'accept',
          managerDecision: comment
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok) {
          await this.bot.sendMessage(msg.chat.id, '‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–Ω—è—Ç–∞.');
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π
    this.bot.onText(/^\/reject\s+(\d+)\s+(.+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        return;
      }

      const explanationId = Number(match[1]);
      const comment = match[2];

      try {
        const result = await this.tools.route('review_explanation', {
          explanationId: explanationId,
          decision: 'reject',
          managerDecision: comment
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok) {
          await this.bot.sendMessage(msg.chat.id, '‚ùå –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è (–ª–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞)
    this.bot.onText(/^\/penalty\s+(\d+)\s+(\d+(?:\.\d+)?)\s+(.+)$/, async (msg, match) => {
      const auth = await this.acl.authorize(msg.from?.id);
      if (!auth.allowed || auth.employee.user_role !== 'manager') {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        return;
      }

      const explanationId = Number(match[1]);
      const penaltyAmount = Number(match[2]);
      const comment = match[3];

      try {
        const result = await this.tools.route('review_explanation', {
          explanationId: explanationId,
          decision: 'penalty',
          managerDecision: comment,
          bonusPenaltyAmount: penaltyAmount
        }, {
          requesterChatId: String(msg.chat.id),
          requesterEmployee: auth.employee
        });

        if (result.ok) {
          await this.bot.sendMessage(msg.chat.id, `üí∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ª–∏—à–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${penaltyAmount} —Å–æ–º.`);
        } else {
          await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        log.error('[BotApp] –û—à–∏–±–∫–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è:', error.message);
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è.');
      }
    });

    this.bot.on('callback_query', async (q) => this.onCallbackQuery(q));
    this.bot.on('message', async (msg) => this.onMessage(msg));
  }

  async start() {}
  async stop() {}

  async onCallbackQuery(q) {
    try {
      const auth = await this.acl.authorize(q.from?.id);
      if (!auth.allowed) {
        await this.bot.answerCallbackQuery(q.id, { text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', show_alert: true });
        return;
      }

      const data = q.data || '';

      // –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: task_status|<id>|<status>
      let m = data.match(/^task_status\|(\d+)\|(.+)$/i);
      if (m) {
        const taskId = Number(m[1]);
        const status = normalizeTaskStatus(m[2]);

        const res = await this.tools.route('update_status', { taskId, status }, {
          requesterChatId: String(q.from.id),
          requesterEmployee: auth.employee
        });

        if (res?.ok) {
          try {
            if (q.message?.chat?.id && q.message?.message_id) {
              await this.bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: q.message.chat.id,
                message_id: q.message.message_id
              });
            }
          } catch {}
          await this.bot.answerCallbackQuery(q.id, { text: `–°—Ç–∞—Ç—É—Å: ${status}` });
        } else {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏
          if (res?.requires && status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') {
            let errorMessage = `‚ö†Ô∏è ${res.error}\n\n`;
            
            if (res.requires.includes('complete_dod')) {
              errorMessage += `üìã **–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å DoD —á–µ–∫-–ª–∏—Å—Ç—ã:**\n`;
              errorMessage += `‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —á–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏\n`;
              errorMessage += `‚Ä¢ –û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã\n\n`;
            }
            
            if (res.requires.includes('provide_report')) {
              errorMessage += `üìù **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç:**\n`;
              errorMessage += `‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É\n`;
              errorMessage += `‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (—Ñ–∞–π–ª—ã, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã)\n`;
              errorMessage += `‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã\n\n`;
            }
            
            errorMessage += `üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
            errorMessage += `‚Ä¢ "—Å–æ–∑–¥–∞—Ç—å DoD —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}"\n`;
            errorMessage += `‚Ä¢ "—Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}"\n`;
            errorMessage += `‚Ä¢ "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ ${taskId}"`;
            
            await this.bot.answerCallbackQuery(q.id, { text: errorMessage, show_alert: true });
          } else {
            await this.bot.answerCallbackQuery(q.id, { text: `‚ö†Ô∏è ${res?.error || '–û—à–∏–±–∫–∞'}`, show_alert: true });
          }
        }
        return;
      }

      // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫ (–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ç.–¥.)

      await this.bot.answerCallbackQuery(q.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    } catch (e) {
      await this.bot.answerCallbackQuery(q.id, { text: `‚ö†Ô∏è ${e?.message || e}`, show_alert: true });
    }
  }

  async getActiveTask(chatId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      const { ConversationLog } = await import('../services/ConversationLog.js');
      const conversationLog = new ConversationLog();
      
      // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      const recentMessages = await conversationLog.getConversationByKeywords(chatId, ['–∑–∞–¥–∞—á–∞', 'task'], 10);
      
      for (const message of recentMessages) {
        // –ò—â–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∑–∞–¥–∞—á–∞ 71", "task 71")
        const taskIdMatch = message.content.match(/(?:–∑–∞–¥–∞—á–∞|task)\s*(\d+)/i);
        if (taskIdMatch) {
          const taskId = Number(taskIdMatch[1]);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
          const taskResult = await this.tools.route('get_task', { taskId }, {
            requesterChatId: String(chatId),
            requesterEmployee: null
          });
          
          if (taskResult?.ok && taskResult.task && taskResult.task.status !== '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') {
            return taskResult.task;
          }
        }
      }
      
      return null;
    } catch (error) {
      log.warn('[BotApp] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏:', error.message);
      return null;
    }
  }

  async findTaskByName(taskName) {
    try {
      // –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ API
      const result = await this.tools.route('list_tasks', {}, {
        requesterChatId: 'system',
        requesterEmployee: null
      });
      
      if (result?.ok && result.tasks) {
        // –ò—â–µ–º –∑–∞–¥–∞—á—É —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        const normalizedSearchName = taskName.toLowerCase().trim();
        
        for (const task of result.tasks) {
          const normalizedTaskName = task.task.toLowerCase().trim();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–∏–µ
          if (normalizedTaskName === normalizedSearchName || 
              normalizedTaskName.includes(normalizedSearchName) ||
              normalizedSearchName.includes(normalizedTaskName)) {
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
            return task;
          }
        }
      }
      
      return null;
    } catch (error) {
      log.warn('[BotApp] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', error.message);
      return null;
    }
  }

  async onMessage(msg) {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç, –Ω–µ –≥–æ–ª–æ—Å –∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (!msg.text && !msg.voice && !msg.document) return;
    if (msg.text && msg.text.startsWith('/')) return;

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const auth = await this.acl.authorize(msg.from?.id);
    if (!auth.allowed) return;

    const chatId = msg.chat.id;

    if (msg.text && !msg.text.startsWith('/')) {
      await this.bot.sendMessage(chatId, '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...');
      const aiReply = await this.assistant.ask(msg.text, { chatId, employee: auth.employee });

      await this.bot.sendMessage(chatId, aiReply);

      try {
        const buf = await this.openai.speak(aiReply);
        const out = await this.files.saveBuffer(buf, 'ogg');
        await this.bot.sendVoice(
          chatId,
          fs.createReadStream(out),
          { filename: 'voice.ogg' }
        );
      } catch {}
      return;
    }

    if (msg.voice) {
      try {
        await this.bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å‚Ä¶');
        const localPath = await this.files.downloadTelegramFile(this.bot, msg.voice.file_id, 'ogg');
        const text = await this.openai.transcribe(localPath);
        await this.bot.sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´${text}¬ª`);

        await this.bot.sendMessage(chatId, 'üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑‚Ä¶');
        const aiReply = await this.assistant.ask(text, { chatId, employee: auth.employee });
        await this.bot.sendMessage(chatId, aiReply);

        try {
          const buf = await this.openai.speak(aiReply);
          const out = await this.files.saveBuffer(buf, 'ogg');
          await this.bot.sendVoice(
            chatId,
            fs.createReadStream(out),
            { filename: 'voice.ogg' }
          );
        } catch {}
      } catch (e) {
        log.error('[VOICE ERROR]', e?.message || e);
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      }
    }

    if (msg.document) {
      try {
        await this.bot.sendMessage(chatId, 'üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const fileName = msg.document.file_name || 'document';
        const fileExt = fileName.split('.').pop()?.toLowerCase() || 'txt';
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const localPath = await this.files.downloadTelegramFile(this.bot, msg.document.file_id, fileExt);
        
        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (['txt', 'md', 'js', 'py', 'java', 'cpp', 'c', 'h', 'json', 'xml', 'html', 'css'].includes(fileExt)) {
          const content = fs.readFileSync(localPath, 'utf8');
          await this.bot.sendMessage(chatId, `üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ¬´${fileName}¬ª:\n\n\`\`\`\n${content.substring(0, 3000)}${content.length > 3000 ? '\n... (—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω)' : ''}\n\`\`\``);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ AI
          await this.bot.sendMessage(chatId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞...');
          const aiReply = await this.assistant.ask(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${fileName}: ${content.substring(0, 2000)}`, { chatId, employee: auth.employee });
          await this.bot.sendMessage(chatId, aiReply);
        } else {
          await this.bot.sendMessage(chatId, `üìÅ –§–∞–π–ª ¬´${fileName}¬ª –ø–æ–ª—É—á–µ–Ω (${fileExt.toUpperCase()}). –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.`);
        }
        
                 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ –≤ –ë–î
         try {
           const fileStats = fs.statSync(localPath);
           
           // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
           let taskId = null;
           let foundTask = null;
           
           // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
           const activeTask = await this.getActiveTask(chatId);
           if (activeTask) {
             taskId = activeTask.id;
             foundTask = activeTask;
             await this.bot.sendMessage(chatId, `üìé –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞—á–µ "${activeTask.task}" (ID: ${taskId})`);
           } else {
             // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
             if (['txt', 'md', 'js', 'py', 'java', 'cpp', 'c', 'h', 'json', 'xml', 'html', 'css'].includes(fileExt)) {
               const content = fs.readFileSync(localPath, 'utf8');
               
                               // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞
                const taskNameMatch = content.match(/(?:–∑–∞–¥–∞—á–∞|task)[:\s]*["']?([^"\n\r]+)["']?/i);
                if (taskNameMatch) {
                  const taskName = taskNameMatch[1].trim();
                  foundTask = await this.findTaskByName(taskName);
                  
                  if (foundTask) {
                    taskId = foundTask.id;
                    await this.bot.sendMessage(chatId, `üìé –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞—á–µ "${foundTask.task}" (ID: ${taskId})`);
                  }
                }
                
                // –¢–∞–∫–∂–µ –∏—â–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
                const taskIdMatch = content.match(/(?:–∑–∞–¥–∞—á–∞\s*id|id\s*–∑–∞–¥–∞—á–∏|task\s*id|üéØ\s*–∑–∞–¥–∞—á–∞\s*id|id)[:\s]*(\d+)/i);
                log.info(`[BotApp] –ü–æ–∏—Å–∫ ID –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª–µ ${fileName}:`, {
                  contentLength: content.length,
                  taskIdMatch: taskIdMatch,
                  firstLines: content.substring(0, 200)
                });
                
                // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ID –≤ —Ñ–∞–π–ª–µ, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–µ–º—É
                if (taskIdMatch && !foundTask) {
                  const taskIdFromFile = Number(taskIdMatch[1]);
                  log.info(`[BotApp] –ù–∞–π–¥–µ–Ω ID –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª–µ: ${taskIdFromFile}`);
                  
                  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É ID –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞
                  taskId = taskIdFromFile;
                  foundTask = { id: taskIdFromFile, task: `–ó–∞–¥–∞—á–∞ ID: ${taskIdFromFile}` };
                  await this.bot.sendMessage(chatId, `üìé –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞—á–µ ID: ${taskIdFromFile}`);
                }
             }
             
             if (!foundTask) {
               await this.bot.sendMessage(chatId, `üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∑–∞–¥–∞—á–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: "–ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª ${fileName} –∫ –∑–∞–¥–∞—á–µ [ID]"`);
             }
           }
           
           await this.tools.route('save_artifact', {
             taskId: taskId,
             fileName: fileName,
             filePath: localPath,
             fileSize: fileStats.size,
             artifactType: 'documentation'
           }, {
             requesterChatId: String(chatId),
             requesterEmployee: auth.employee
           });
           
           // –û—Ç–ª–∞–¥–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
           await this.bot.sendMessage(chatId, `üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å taskId: ${taskId}`);
         } catch (e) {
           log.warn('[FILE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:', e?.message);
         }
        
      } catch (e) {
        log.error('[FILE ERROR]', e?.message || e);
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.');
      }
    }
  }
}
