import cron from 'node-cron';
import { query } from '../config/db.js';
import { log } from '../utils/logger.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, –µ—Å—Ç—å –ª–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞
 */
export class ExplanationTimeoutService {
  constructor({ toolRouter, notifier, explanatoryService }) {
    this.toolRouter = toolRouter;
    this.notifier = notifier;
    this.explanatoryService = explanatoryService;
    this.isRunning = false;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
   */
  start() {
    if (this.isRunning) {
      log.warn('[ExplanationTimeoutService] –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    this.task = cron.schedule('*/10 * * * *', async () => {
      try {
        await this.checkOverdueExplanations();
      } catch (error) {
        log.error('[ExplanationTimeoutService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö:', error.message);
      }
    }, { timezone: 'Asia/Dushanbe' });

    this.task.start();
    this.isRunning = true;
    log.info('[ExplanationTimeoutService] –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  stop() {
    if (this.task) {
      this.task.stop();
      this.task = null;
    }
    this.isRunning = false;
    log.info('[ExplanationTimeoutService] –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
   */
  async checkOverdueExplanations() {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –±–æ–ª–µ–µ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
      
      const rows = await query(`
        SELECT 
          ee.id,
          ee.task_id,
          ee.employee_id,
          ee.requested_at,
          e.name as employee_name,
          e.chat_id as employee_chat_id,
          e.job as employee_job,
          t.task as task_title
        FROM employee_explanations ee
        LEFT JOIN employees e ON ee.employee_id = e.employee_id
        LEFT JOIN tasks t ON ee.task_id = t.task_id
        WHERE ee.status = 'pending' 
          AND ee.requested_at < ?
        ORDER BY ee.requested_at ASC
      `, [oneHourAgo]);

      if (!rows || rows.length === 0) {
        return; // –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
      }

      log.info(`[ExplanationTimeoutService] –ù–∞–π–¥–µ–Ω–æ ${Array.isArray(rows) ? rows.length : 0} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      const overdueByEmployee = {};
      for (const row of rows) {
        const empId = String(row.employee_id);
        if (!overdueByEmployee[empId]) {
          overdueByEmployee[empId] = {
            employee: {
              name: row.employee_name,
              chat_id: row.employee_chat_id,
              job: row.employee_job
            },
            explanations: []
          };
        }
        overdueByEmployee[empId].explanations.push(row);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
      await this.notifyDirectorAboutOverdueExplanations(overdueByEmployee);

        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å 'pending')
        const explanationIds = (Array.isArray(rows) ? rows : []).map(row => row.id);
        if (explanationIds.length > 0) {
          log.info(`[ExplanationTimeoutService] –ù–∞–π–¥–µ–Ω–æ ${explanationIds.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö (—Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–µ—Ç—Å—è 'pending')`);
        }

    } catch (error) {
      log.error('[ExplanationTimeoutService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö:', error.message);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
   */
  async notifyDirectorAboutOverdueExplanations(overdueByEmployee) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤
      const directorChatIds = await this.getDirectorChatIds();
      
      if (directorChatIds.length === 0) {
        log.warn('[ExplanationTimeoutService] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = this.buildOverdueExplanationMessage(overdueByEmployee);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
      for (const directorChatId of directorChatIds) {
        try {
          if (this.toolRouter?.route) {
            await this.toolRouter.route('send_telegram', { 
              to: directorChatId, 
              text: message 
            }, {
              requesterChatId: 'system',
              requesterEmployee: { user_role: 'manager', name: 'System Timeout Monitor' }
            });
          } else if (this.notifier?.sendMessage) {
            await this.notifier.sendMessage(directorChatId, message);
          } else if (this.notifier?.sendText) {
            await this.notifier.sendText(directorChatId, message);
          }
          
          log.info(`[ExplanationTimeoutService] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É ${directorChatId}`);
        } catch (error) {
          log.error(`[ExplanationTimeoutService] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—É ${directorChatId}:`, error.message);
        }
      }

    } catch (error) {
      log.error('[ExplanationTimeoutService] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ chat_id –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤
   */
  async getDirectorChatIds() {
    try {
      const [rows] = await query(`
        SELECT chat_id, name, job 
        FROM employees 
        WHERE (LOWER(job) LIKE '%–¥–∏—Ä–µ–∫—Ç–æ—Ä%' 
               OR LOWER(job) LIKE '%—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å%'
               OR LOWER(name) LIKE '%–º—É–º–∏–Ω–æ–≤%'
               OR LOWER(name) LIKE '%–±–∞—Ö—Ç–∏—ë—Ä%')
          AND chat_id IS NOT NULL 
          AND chat_id != ''
      `);

      return Array.isArray(rows) ? rows.map(row => row.chat_id).filter(Boolean) : [rows.chat_id].filter(Boolean);
    } catch (error) {
      log.error('[ExplanationTimeoutService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤:', error.message);
      return [];
    }
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
   */
  buildOverdueExplanationMessage(overdueByEmployee) {
    const now = new Date();
    const totalOverdue = Object.values(overdueByEmployee)
      .reduce((sum, emp) => sum + emp.explanations.length, 0);

    let message = `üö® –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–£\n\n`;
    message += `‚è∞ –í—Ä–µ–º—è: ${now.toLocaleString('ru-RU', { timeZone: 'Asia/Dushanbe' })}\n`;
    message += `üìù –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${totalOverdue}\n\n`;

    message += `‚ö†Ô∏è –°–û–¢–†–£–î–ù–ò–ö–ò –ù–ï –ü–†–ï–î–û–°–¢–ê–í–ò–õ–ò –û–ë–™–Ø–°–ù–ò–¢–ï–õ–¨–ù–´–ï –í –¢–ï–ß–ï–ù–ò–ï 1 –ß–ê–°–ê:\n\n`;

    for (const [empId, data] of Object.entries(overdueByEmployee)) {
      const { employee, explanations } = data;
      const hoursOverdue = Math.floor((now - new Date(explanations[0].requested_at)) / (1000 * 60 * 60));
      
      message += `üë§ ${employee.name} (${employee.job || '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})\n`;
      message += `‚è± –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞: ${hoursOverdue} —á.\n`;
      message += `üìã –ó–∞–¥–∞—á —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: ${explanations.length}\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏
      const tasksToShow = explanations.slice(0, 3);
      for (const exp of tasksToShow) {
        const requestedTime = new Date(exp.requested_at).toLocaleString('ru-RU');
        message += `   ‚Ä¢ –ó–∞–¥–∞—á–∞ #${exp.task_id}: "${exp.task_title || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"\n`;
        message += `     –ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${requestedTime}\n`;
      }
      
      if (explanations.length > 3) {
        message += `   ... –∏ –µ—â–µ ${explanations.length - 3} –∑–∞–¥–∞—á\n`;
      }
      
      message += `\n`;
    }

    message += `üîß –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –î–ò–†–ï–ö–¢–û–†–ê:\n`;
    for (const [empId, data] of Object.entries(overdueByEmployee)) {
      const { employee } = data;
      message += `‚Ä¢ –î–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Å ${employee.name}: /give_extra_hour ${empId}\n`;
      message += `‚Ä¢ –õ–∏—à–∏—Ç—å –±–æ–Ω—É—Å–∞ ${employee.name}: /penalty_bonus ${empId} [—Å—É–º–º–∞] [–ø—Ä–∏—á–∏–Ω–∞]\n`;
    }
    message += `\nüí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:\n`;
    message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /explanations –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö\n`;
    message += `‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é\n`;

    return message;
  }

  /**
   * –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async checkNow() {
    log.info('[ExplanationTimeoutService] –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö');
    await this.checkOverdueExplanations();
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
 */
export function startExplanationTimeoutService({ toolRouter, notifier, explanatoryService }) {
  const service = new ExplanationTimeoutService({ toolRouter, notifier, explanatoryService });
  service.start();
  return service;
}
