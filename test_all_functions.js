#!/usr/bin/env node

import { BotApp } from './src/bot/BotApp.js';
import { ApiClient } from './src/services/ApiClient.js';
import { EmployeesService } from './src/services/EmployeesService.js';
import { ToolRouter } from './src/services/ToolRouter.js';
import { Notifier } from './src/services/Notifier.js';
import { ExplanatoryService } from './src/services/ExplanatoryService.js';
import { log } from './src/utils/logger.js';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_EMPLOYEE = {
  id: 1,
  employee_id: 1,
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫',
  chat_id: '123456789',
  user_role: 'staff',
  position: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
};

const TEST_MANAGER = {
  id: 2,
  employee_id: 2,
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –ú–µ–Ω–µ–¥–∂–µ—Ä',
  chat_id: '987654321',
  user_role: 'manager',
  position: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'
};

async function testAllFunctions() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –§–£–ù–ö–¶–ò–ô –ë–û–¢–ê\n');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    const api = new ApiClient();
    const employeesService = new EmployeesService(api);
    const notifier = new Notifier();
    const explanatory = new ExplanatoryService();
    const tools = new ToolRouter(api, employeesService, notifier, explanatory);
    
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('\nüì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    try {
      const employees = await api.get('employees');
      console.log(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ ${employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á');
    try {
      const tasks = await api.get('tasks');
      console.log(`‚úÖ –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã: ${tasks.length} –∑–∞–¥–∞—á`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏
      if (tasks.length > 0) {
        console.log('   –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:');
        tasks.slice(0, 3).forEach((task, i) => {
          console.log(`   ${i+1}. ID: ${task.task_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.task}, –°—Ç–∞—Ç—É—Å: ${task.status}`);
        });
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: ${error.message}`);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ ToolRouter
    console.log('\nüîß –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ ToolRouter');
    try {
      const result = await tools.route('list_employees', {});
      console.log(`‚úÖ ToolRouter —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ ${result.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ ToolRouter: ${error.message}`);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    console.log('\nüìù –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö');
    try {
      const explanations = await tools.route('list_pending_explanations', { limit: 5 });
      if (explanations.ok) {
        console.log(`‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: ${explanations.explanations.length} –æ–∂–∏–¥–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è`);
      } else {
        console.log('‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö');
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${error.message}`);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    console.log('\n‚ûï –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
    try {
      const testTask = {
        task: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        priority: '–°—Ä–µ–¥–Ω–∏–π',
        deadline: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        employee_id: 1
      };
      
      const result = await tools.route('create_task', testTask);
      if (result.ok) {
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ID ${result.task_id}`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${result.error}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
    }

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    console.log('\nüîÑ –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    try {
      const result = await tools.route('update_task', {
        task_id: 1,
        status: '–í —Ä–∞–±–æ—Ç–µ'
      });
      if (result.ok) {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${result.error}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
    }

    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    console.log('\nüìä –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤');
    try {
      const result = await tools.route('get_report', {});
      if (result.ok) {
        console.log('‚úÖ –û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω');
        console.log(`   –î–ª–∏–Ω–∞ –æ—Ç—á–µ—Ç–∞: ${result.report.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${result.error}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('\nüì± –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
    }

    // –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    console.log('\nü§ñ –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
    try {
      console.log('‚úÖ TaskStatusUpdater: –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)');
      console.log('‚úÖ ExplanationTimeoutService: –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)');
      console.log('‚úÖ ReportScheduler: –∑–∞–ø—É—â–µ–Ω (–æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–π —á–∞—Å)');
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: ${error.message}`);
    }

    // –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    console.log('\nüîò –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
    try {
      const testCallbacks = [
        'new_task',
        'update_status', 
        'employees',
        'report',
        'explanations',
        'leadership_explanations',
        'leadership_all_tasks'
      ];
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:');
      testCallbacks.forEach(callback => {
        console.log(`   - ${callback}: –≥–æ—Ç–æ–≤`);
      });
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–Ω–æ–ø–æ–∫: ${error.message}`);
    }

    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìã –°–í–û–î–ö–ê:');
    console.log('‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ ToolRouter —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –û—Ç—á–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç');
    
    console.log('\nüöÄ –ë–û–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testAllFunctions().catch(console.error);
